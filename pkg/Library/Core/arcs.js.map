{
  "version": 3,
  "sources": ["../../../core/js/core/EventEmitter.js", "../../../core/js/utils/types.js", "../../../core/js/utils/log.js", "../../../core/js/core/Arc.js", "../../../core/js/utils/object.js", "../../../core/js/utils/rand.js", "../../../core/js/core/Decorator.js", "../../../core/js/core/Host.js", "../../../core/js/core/Store.js", "../../../core/js/utils/id.js", "../../../core/js/Runtime.js", "../../../core/js/recipe/RecipeParser.js", "../../../core/js/utils/matching.js", "../../../core/js/recipe/StoreCook.js", "../../../core/js/recipe/ParticleCook.js", "../../../core/js/recipe/Chef.js", "../../../core/js/recipe/Graphinator.js", "../../../core/js/isolation/code.js", "../../../core/js/utils/paths.js", "../../../core/js/utils/utils.js", "../../../core/js/utils/date.js", "../../../core/js/utils/task.js", "../../../core/src/arcs.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nexport class EventEmitter {\n    // map of event name to listener array\n    listeners = {};\n    getEventListeners(eventName) {\n        return this.listeners[eventName] || (this.listeners[eventName] = []);\n    }\n    fire(eventName, ...args) {\n        const listeners = this.getEventListeners(eventName);\n        if (listeners?.forEach) {\n            listeners.forEach(listener => listener(...args));\n        }\n    }\n    listen(eventName, listener, listenerName) {\n        const listeners = this.getEventListeners(eventName);\n        listeners.push(listener);\n        listener._name = listenerName || '(unnamed listener)';\n        return listener;\n    }\n    unlisten(eventName, listener) {\n        const list = this.getEventListeners(eventName);\n        const index = (typeof listener === 'string') ? list.findIndex(l => l._name === listener) : list.indexOf(listener);\n        if (index >= 0) {\n            list.splice(index, 1);\n        }\n        else {\n            console.warn('failed to unlisten from', eventName);\n        }\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nexport const logKinds = ['log', 'group', 'groupCollapsed', 'groupEnd', 'dir'];\nexport const errKinds = ['warn', 'error'];\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logKinds, errKinds } from './types.js';\nconst { fromEntries } = Object;\nconst _logFactory = (enable, preamble, bg, color, kind = 'log') => {\n    if (typeof enable === 'string') {\n        enable = logFactory.flags[enable];\n    }\n    if (!enable) {\n        return () => { };\n    }\n    if (kind === 'dir') {\n        return console.dir.bind(console);\n    }\n    const style = `background: ${bg || 'gray'}; color: ${color || 'white'}; padding: 1px 6px 2px 7px; border-radius: 6px 0 0 6px;`;\n    return console[kind].bind(console, `%c${preamble}`, style);\n};\nexport const logFactory = (enable, preamble, bg = '', color = '') => {\n    const debugLoggers = fromEntries(logKinds.map(kind => [kind, _logFactory(enable, preamble, bg, color, kind)]));\n    const errorLoggers = fromEntries(errKinds.map(kind => [kind, _logFactory(true, preamble, bg, color, kind)]));\n    const loggers = { ...debugLoggers, ...errorLoggers };\n    // Inject `log` as default, keeping all loggers available to be invoked by name.\n    const log = loggers.log;\n    Object.assign(log, loggers);\n    return log;\n};\nlogFactory.flags = globalThis.config?.logFlags || {};\n", "/**\n * @license\n * Copyright (c) 2022 Google LLC All rights reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file.\n */\nimport { EventEmitter } from './EventEmitter.js';\nimport { logFactory } from '../utils/log.js';\nconst customLogFactory = (id) => logFactory(logFactory.flags.arc, `Arc (${id})`, 'slateblue');\nconst { assign, create } = Object;\nconst entries = (o) => Object.entries(o ?? Object);\nconst keys = (o) => Object.keys(o ?? Object);\nconst values = (o) => Object.values(o ?? Object);\nconst nob = () => create(null);\nexport class Arc extends EventEmitter {\n    log;\n    id;\n    meta;\n    stores;\n    hosts;\n    surface;\n    composer;\n    hostService;\n    constructor(id, meta, surface) {\n        super();\n        this.id = id;\n        this.meta = meta;\n        this.surface = surface;\n        this.hosts = nob();\n        this.stores = nob();\n        this.log = customLogFactory(id);\n    }\n    async addHost(host, surface) {\n        // to support hosts we need a composer\n        await this.ensureComposer();\n        // bookkeep\n        this.hosts[host.id] = host;\n        host.arc = this;\n        // TODO(sjmiles): support per host surfacing?\n        //await host.bindToSurface(surface ?? this.surface);\n        // begin work\n        this.updateHost(host);\n        return host;\n    }\n    async ensureComposer() {\n        if (!this.composer && this.surface) {\n            // create composer\n            this.composer = await this.surface.createComposer('root');\n            // pipeline for events from composer to this.onevent\n            // TODO(sjmiles): use 'bind' to avoid a closure and improve the stack trace\n            this.composer.onevent = this.onevent.bind(this);\n        }\n    }\n    rerender() {\n        values(this.hosts).forEach(h => h.rerender());\n    }\n    removeHost(id) {\n        this.hosts[id]?.detach();\n        delete this.hosts[id];\n    }\n    addStore(storeId, store) {\n        if (store && !this.stores[storeId]) {\n            this.stores[storeId] = store;\n            store.listen('change', () => this.storeChanged(storeId, store), this.id);\n        }\n    }\n    removeStore(storeId) {\n        const store = this.stores[storeId];\n        if (store) {\n            store.unlisten('change', this.id);\n        }\n        delete this.stores[storeId];\n    }\n    // TODO(sjmiles): 2nd param is used in overrides, make explicit\n    storeChanged(storeId, store) {\n        this.log(`storeChanged: \"${storeId}\"`);\n        const isBound = inputs => inputs && inputs.some(input => input && (values(input)[0] == storeId || keys(input)[0] == storeId));\n        values(this.hosts).forEach(host => {\n            const inputs = host.meta?.inputs;\n            if (inputs === '*' || isBound(inputs)) {\n                this.log(`host \"${host.id}\" has interest in \"${storeId}\"`);\n                // TODO(sjmiles): we only have to update inputs for storeId, we lose efficiency here\n                this.updateHost(host);\n            }\n        });\n        this.fire('store-changed', storeId);\n    }\n    updateParticleMeta(hostId, meta) {\n        const host = this.hosts[hostId];\n        host.meta = meta;\n        this.updateHost(host);\n    }\n    updateHost(host) {\n        host.inputs = this.computeInputs(host);\n    }\n    // TODO(sjmiles): debounce? (update is sync-debounced already)\n    // complement to `assignOutputs`\n    computeInputs(host) {\n        const inputs = nob();\n        //\n        const bindings = host.meta?.inputs;\n        if (bindings === '*') {\n            // TODO(sjmiles): we could make the contract that the bindAll inputs are\n            // names (or names + meta) only. The Particle could look up values via\n            // service (to reduce throughput requirements)\n            entries(this.stores).forEach(([name, store]) => inputs[name] = store.pojo);\n        }\n        //\n        else {\n            // start with staticInputs\n            assign(inputs, host.meta?.staticInputs);\n            // for all bindings, copy in non-undefined values\n            bindings?.filter(b => b).forEach(b => {\n                // extract key and value for the binding\n                const [prop, binding] = entries(b).pop() || [];\n                if (prop && binding) {\n                    // look for store data at this binding\n                    const value = this.stores[binding]?.pojo;\n                    // if it's defined, capture it as input\n                    if (value !== undefined) {\n                        inputs[prop] = value;\n                    }\n                }\n            });\n            this.log(`computeInputs(${host.id}) =`, inputs);\n        }\n        return inputs;\n    }\n    // complement to `computeInputs`\n    assignOutputs({ id, meta }, outputs) {\n        const names = keys(outputs);\n        if (meta?.outputs && names.length) {\n            names.forEach(name => this.assignOutput(name, outputs[name], meta.outputs));\n            this.log(`[end][${id}] assignOutputs:`, outputs);\n        }\n    }\n    assignOutput(name, output, outputs) {\n        if (output !== undefined) {\n            const binding = this.findOutputByName(outputs, name) || name;\n            const store = this.stores[binding];\n            if (!store) {\n                if (outputs?.[name]) {\n                    this.log.warn(`assignOutputs: no \"${binding}\" store for output \"${name}\"`);\n                }\n            }\n            else {\n                // Note: users can mess up output data in any way they see fit, so we should\n                // probably invent `outputCleansing`.\n                this.log(`assignOutputs: \"${name}\" is dirty, updating Store \"${binding}\"`, output);\n                store.data = output;\n            }\n        }\n    }\n    findOutputByName(outputs, name) {\n        const output = outputs?.find(output => keys(output || 0)[0] === name);\n        if (output) {\n            return values(output)[0];\n        }\n    }\n    async render(packet) {\n        if (this.composer) {\n            this.composer.render({ ...packet, arcid: this.id });\n        }\n        else {\n            //this.log.low('render called, but composer is null', packet);\n        }\n    }\n    onevent(pid, eventlet) {\n        const host = this.hosts[pid];\n        if (host) {\n            host.handleEvent(eventlet);\n        }\n    }\n    async service(host, request) {\n        let result = await this.surface?.service(request);\n        if (result === undefined) {\n            result = this.hostService?.(host, request);\n        }\n        return result;\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\n/*\n * update the fields of `obj` with the fields of `data`,\n * perturbing `obj` as little as possible (since it might be a magic proxy thing\n * like an Automerge document)\n */\nexport const shallowUpdate = (obj, data) => {\n    let result = data;\n    if (!data) {\n        //\n    }\n    else if (Array.isArray(data)) {\n        if (!Array.isArray(obj)) {\n            // TODO(sjmiles): eek, very perturbing to obj\n            obj = [];\n        }\n        for (let i = 0; i < data.length; i++) {\n            const value = data[i];\n            if (obj[i] !== value) {\n                obj[i] = value;\n            }\n        }\n        const overage = obj.length - data.length;\n        if (overage > 0) {\n            obj.splice(data.length, overage);\n        }\n    }\n    else if (typeof data === 'object') {\n        result = (obj && typeof obj === 'object') ? obj : Object.create(null);\n        const seen = {};\n        // for each key in input data ...\n        Object.keys(data).forEach(key => {\n            // copy that data into output\n            result[key] = data[key];\n            // remember the key\n            seen[key] = true;\n        });\n        // for each key in the output data...\n        Object.keys(result).forEach(key => {\n            // if this key was not in the input, remove it\n            if (!seen[key]) {\n                delete result[key];\n            }\n        });\n    }\n    return result;\n};\nexport const shallowMerge = (obj, data) => {\n    if (data == null) {\n        return null;\n    }\n    if (typeof data === 'object') {\n        const result = (obj && typeof obj === 'object') ? obj : Object.create(null);\n        Object.keys(data).forEach(key => result[key] = data[key]);\n        return result;\n    }\n    return data;\n};\nexport function deepCopy(datum) {\n    if (!datum) {\n        return datum;\n    }\n    else if (Array.isArray(datum)) {\n        // This is trivially type safe but tsc needs help\n        return datum.map(element => deepCopy(element));\n    }\n    else if (typeof datum === 'object') {\n        const clone = Object.create(null);\n        Object.entries(datum).forEach(([key, value]) => {\n            clone[key] = deepCopy(value);\n        });\n        return clone;\n    }\n    else {\n        return datum;\n    }\n}\nexport const deepEqual = (a, b) => {\n    const type = typeof a;\n    // must be same type to be equal\n    if (type !== typeof b) {\n        return false;\n    }\n    // we are `deep` because we recursively study object types\n    if (type === 'object' && a && b) {\n        const aProps = Object.getOwnPropertyNames(a);\n        const bProps = Object.getOwnPropertyNames(b);\n        // equal if same # of props, and no prop is not deepEqual\n        return (aProps.length == bProps.length) && !aProps.some(name => !deepEqual(a[name], b[name]));\n    }\n    // finally, perform simple comparison\n    return (a === b);\n};\nexport const deepUndefinedToNull = (obj) => {\n    if (obj === undefined) {\n        return null;\n    }\n    if (obj && (typeof obj === 'object')) {\n        // we are `deep` because we recursively study object types\n        const props = Object.getOwnPropertyNames(obj);\n        props.forEach(name => {\n            const prop = obj[name];\n            if (prop === undefined) {\n                delete obj[name];\n                //obj[name] = null;\n            }\n            else {\n                deepUndefinedToNull(prop);\n            }\n        });\n    }\n    return obj;\n};\n", "/**\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nconst { floor, pow, random } = Math;\n// random n-digit number\nexport const key = (digits) => floor((1 + random() * 9) * pow(10, digits - 1));\n// random integer from [0..range)\nexport const irand = (range) => floor(random() * range);\n// random element from array\nexport const arand = (array) => array[irand(array.length)];\n// test if event has occured, where `probability` is between [0..1]\nexport const prob = (probability) => Boolean(random() < probability);\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nimport { deepCopy } from '../utils/object.js';\nconst log = logFactory(logFactory.flags.decorator, 'Decorator', 'plum');\nconst { values, entries } = Object;\nconst opaqueData = {};\nexport const Decorator = {\n    setOpaqueData(name, data) {\n        opaqueData[name] = data; //deepCopy(data);\n        return name;\n    },\n    getOpaqueData(name) {\n        return opaqueData[name];\n    },\n    maybeDecorateModel(model, particle) {\n        if (model && !Array.isArray(model)) {\n            // for each item in model, regardless of key\n            values(model).forEach((item) => {\n                // is an object?\n                if (item && (typeof item === 'object')) {\n                    // are there sub-models\n                    if (item['models']) {\n                        // the decorate this item\n                        log('applying decorator(s) to list:', item);\n                        this.maybeDecorateItem(item, particle);\n                    }\n                    else {\n                        // otherwise, check if there are sub-items to decorate\n                        if (model?.filter || model?.decorator || model?.collateBy) {\n                            log('scanning for lists in sub-model:', item);\n                            this.maybeDecorateModel(item, particle);\n                        }\n                    }\n                }\n            });\n        }\n        // possibly decorated model\n        return model;\n    },\n    maybeDecorateItem(item, particle) {\n        let models = (typeof item.models === 'string') ? this.getOpaqueData(item.models) : item.models;\n        if (models) {\n            // do a decorator\n            models = maybeDecorate(models, item.decorator, particle);\n            // do a filter\n            models = maybeFilter(models, item.filter, particle.impl);\n            // do a collator\n            models = maybeCollateBy(models, item);\n            // mutate items\n            item.models = models;\n            //console.log(JSON.stringify(models, null, '  '));\n        }\n    },\n};\nconst maybeDecorate = (models, decorator, particle) => {\n    decorator = particle.impl[decorator] ?? decorator;\n    const { inputs, state } = particle.internal;\n    if (decorator) {\n        // TODO(cromwellian): Could be expensive to do everything, store responsibility?\n        const immutableInputs = Object.freeze(deepCopy(inputs));\n        // we don't want the decorator to have access to mutable globals\n        const immutableState = Object.freeze(deepCopy(state));\n        // models become decorous\n        models = models.map(model => {\n            // use previously mutated data or initialize\n            // TODO(cromwellian): I'd like to do Object.freeze() here, also somehow not mutate the models inplace\n            // Possibly have setOpaqueData wrap the data so the privateData lives on the wrapper + internal immutable data\n            model.privateData = model.privateData || {};\n            // TODO(cromwellian): also could be done once during setOpaqueData() if we can track privateData differently\n            const immutableModel = Object.freeze(deepCopy(model));\n            const decorated = decorator(immutableModel, immutableInputs, immutableState);\n            // set new privateData from returned\n            model.privateData = decorated.privateData;\n            return { ...decorated, ...model, };\n        });\n        // sort (possible that all values undefined)\n        models.sort(sortByLc('sortKey'));\n        log('decoration was performed');\n    }\n    //models.forEach(model => delete model.privateData);\n    return models;\n};\nconst maybeFilter = (models, filter, impl) => {\n    filter = impl[filter] ?? filter;\n    if (filter && models) {\n        // models become filtrated\n        models = models.filter(filter);\n    }\n    return models;\n};\nconst maybeCollateBy = (models, item) => {\n    // construct requested sub-lists\n    entries(item).forEach(([name, collator]) => {\n        // generate named collations for items of the form `[name]: {collateBy}`\n        if (collator?.['collateBy']) {\n            // group the models into buckets based on the model-field named by `collateBy`\n            const collation = collate(models, collator['collateBy']);\n            models = collationToRenderModels(collation, name, collator['$template']);\n        }\n    });\n    return models;\n};\nconst sortByLc = key => (a, b) => sort(String(a[key]).toLowerCase(), String(b[key]).toLowerCase());\n//const sortBy = key => (a, b) => sort(a[key], b[key]);\nconst sort = (a, b) => a < b ? -1 : a > b ? 1 : 0;\nconst collate = (models, collateBy) => {\n    const collation = {};\n    models.forEach(model => {\n        const keyValue = model[collateBy];\n        if (keyValue) {\n            const category = collation[keyValue] || (collation[keyValue] = []);\n            category.push(model);\n        }\n    });\n    return collation;\n};\nconst collationToRenderModels = (collation, name, $template) => {\n    return entries(collation).map(([key, models]) => ({\n        key,\n        [name]: { models, $template },\n        single: !(models['length'] !== 1),\n        ...models?.[0]\n    }));\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nimport { deepEqual, deepCopy } from '../utils/object.js';\nimport { arand } from '../utils/rand.js';\nimport { EventEmitter } from './EventEmitter.js';\nimport { Decorator } from './Decorator.js';\nconst { entries, keys } = Object;\nconst customLogFactory = (id) => logFactory(logFactory.flags.host, `Host (${id})`, arand(['#5a189a', '#51168b', '#48137b', '#6b2fa4', '#7b46ae', '#3f116c']));\n/**\n * Host owns metadata (e.g. `id`, `container`) that its Particle is not allowed to access.\n * Host knows how to talk, asynchronously, to its Particle (potentially using a bus).\n**/\n/* TODO(sjmiles):\nUpdate Cycle Documented Briefly\n1. when a Store changes it invokes it's listeners\n2. when an Arc hears a Store change, it updates Hosts bound to the Store\n3. Arc updates Host by creating an `inputs` object from Stores and metadata\n   - ignores fact inputs are accumulated\n   - ignores information about which Store has updated\n4. `inputs` object is assigned to `hosts.inputs` \uD83D\uDE43\n5. Host does an expensive `deepEqual` equality check. Turning on `host` logging should reveal `this.log('inputs are not interesting, skipping update');` if data is caught in this trap\n   - we can use reference testing here if we are more careful\n     about using immutable data\n6. the particle.inputs are assigned (but is really a *merge*)\n*/\nexport class Host extends EventEmitter {\n    arc;\n    id;\n    lastOutput;\n    lastPacket;\n    lastRenderModel;\n    log;\n    meta;\n    particle;\n    constructor(id) {\n        super();\n        this.log = customLogFactory(id);\n        this.id = id;\n    }\n    onevent(eventlet) {\n        this.arc?.onevent(eventlet);\n        this.fire('eventlet', eventlet);\n    }\n    // Particle and ParticleMeta are separate, host specifically integrates these on behalf of Particle\n    installParticle(particle, meta) {\n        if (this.particle) {\n            this.detachParticle();\n        }\n        if (particle) {\n            this.particle = particle;\n            this.meta = meta || this.meta;\n        }\n    }\n    get container() {\n        return this.meta?.container || 'root';\n    }\n    detach() {\n        this.detachParticle();\n        this.arc = null;\n    }\n    detachParticle() {\n        if (this.particle) {\n            this.render({ $clear: true });\n            this.particle = null;\n            this.meta = null;\n        }\n    }\n    async service(request) {\n        if (request?.decorate) {\n            return Decorator.maybeDecorateModel(request.model, this.particle);\n        }\n        return this.arc?.service(this, request);\n    }\n    output(outputModel, renderModel) {\n        if (outputModel) {\n            this.lastOutput = outputModel;\n            this.arc?.assignOutputs(this, outputModel);\n            this.fire('output', outputModel);\n        }\n        if (this.template) {\n            Decorator.maybeDecorateModel(renderModel, this.particle);\n            this.lastRenderModel = { ...renderModel };\n            this.render(renderModel);\n        }\n    }\n    rerender() {\n        // does not re-render Frame/Slot content\n        // you probably want Arc::rerender\n        if (this.lastRenderModel) {\n            this.render(this.lastRenderModel);\n        }\n    }\n    render(model) {\n        const { id, container, template } = this;\n        const content = { model, template };\n        const packet = { id, container, content };\n        this.fire('render', packet);\n        this.arc?.render(packet);\n        this.lastPacket = packet;\n    }\n    set inputs(inputs) {\n        if (this.particle && inputs) {\n            const lastInputs = this.particle.internal.inputs;\n            if (this.dirtyCheck(inputs, lastInputs, this.lastOutput)) {\n                this.particle.inputs = deepCopy({ ...this.meta?.staticInputs, ...inputs });\n                this.fire('inputs-changed');\n            }\n            else {\n                this.log('inputs are uninteresting, skipping update');\n            }\n        }\n    }\n    dirtyCheck(inputs, lastInputs, lastOutput) {\n        const dirtyBits = ([n, v]) => (lastOutput?.[n] && !deepEqual(lastOutput[n], v))\n            || !deepEqual(lastInputs?.[n], v);\n        return !lastInputs\n            || entries(inputs).length !== this.lastInputsLength(lastInputs)\n            || entries(inputs).some(dirtyBits);\n    }\n    lastInputsLength(lastInputs) {\n        return keys(lastInputs).filter(key => !this.meta?.staticInputs?.[key] && key !== 'eventlet').length;\n    }\n    get config() {\n        return this.particle?.config;\n    }\n    get template() {\n        return this.config?.template;\n    }\n    invalidate() {\n        this.particle?.invalidate();\n    }\n    handleEvent(eventlet) {\n        return this.particle?.handleEvent(eventlet);\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { EventEmitter } from './EventEmitter.js';\nconst { create, keys } = Object;\nconst { stringify, parse } = JSON;\nexport class DataStore extends EventEmitter {\n    privateData;\n    constructor() {\n        super();\n    }\n    setPrivateData(data) {\n        this.privateData = data;\n    }\n    set data(data) {\n        this.setPrivateData(data);\n    }\n    get data() {\n        return this.privateData;\n    }\n    toString() {\n        return this.pretty;\n    }\n    get isObject() {\n        return this.data && typeof this.data === 'object';\n    }\n    get pojo() {\n        return this.data;\n    }\n    get json() {\n        return stringify(this.data);\n    }\n    set json(json) {\n        let value = null;\n        try {\n            value = parse(json);\n        }\n        catch (x) {\n            //\n        }\n        this.data = value;\n    }\n    get pretty() {\n        const sorted = {};\n        const pojo = this.pojo;\n        keys(pojo).sort().forEach(key => sorted[key] = pojo[key]);\n        return stringify(sorted, null, '  ');\n    }\n}\nclass ObservableStore extends DataStore {\n    change(mutator) {\n        mutator(this);\n        this.doChange();\n    }\n    doChange() {\n        this.fire('change', this);\n        this.onChange(this);\n    }\n    onChange(store) {\n        // override\n    }\n    set data(data) {\n        this.change(self => self.setPrivateData(data));\n    }\n    // TODO(sjmiles): one of the compile/build/bundle tools\n    // evacipates the inherited getter, so we clone it\n    get data() {\n        return this['privateData'];\n    }\n    set(key, value) {\n        if (!this.data) {\n            this.setPrivateData(create(null));\n        }\n        if (value !== undefined) {\n            this.change(self => self.data[key] = value);\n        }\n        else {\n            this.delete(key);\n        }\n    }\n    delete(key) {\n        this.change(doc => delete doc.data[key]);\n    }\n}\nclass PersistableStore extends ObservableStore {\n    meta;\n    constructor(meta) {\n        super();\n        this.meta = { ...meta };\n    }\n    toString() {\n        return `${JSON.stringify(this.meta, null, '  ')}, ${this.pretty}`;\n    }\n    get tags() {\n        return this.meta.tags ?? (this.meta.tags = []);\n    }\n    is(...tags) {\n        // true if every member of `tags` is also in `this.tags`\n        return tags.every(tag => this.tags.includes(tag));\n    }\n    isCollection() {\n        return this.meta.type?.[0] === '[';\n    }\n    shouldPersist() {\n        return this.is('persisted') && !this.is('volatile');\n    }\n    async doChange() {\n        // do not await\n        this.persist();\n        return super.doChange();\n    }\n    // TODO(sjmiles): as of now the persist/restore methods\n    // are bound in Runtime:addStore\n    async persist() {\n    }\n    async restore( /*value: any*/) {\n    }\n    // delete() {\n    //   this.persistor?.remove(this);\n    // }\n    save() {\n        return this.json;\n    }\n    load(serial, defaultValue) {\n        let value = defaultValue;\n        try {\n            if (serial) {\n                value = parse(serial);\n            }\n        }\n        catch (x) {\n            //\n        }\n        if (value !== undefined) {\n            this.data = value;\n        }\n    }\n}\nexport class Store extends PersistableStore {\n}\n", "/**\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { irand } from \"./rand.js\";\nexport const makeId = (pairs, digits, delim) => {\n    pairs = pairs || 2;\n    digits = digits || 2;\n    delim = delim || '-';\n    const min = Math.pow(10, digits - 1);\n    const range = Math.pow(10, digits) - min;\n    const result = [];\n    for (let i = 0; i < pairs; i++) {\n        result.push(`${irand(range - min) + min}`);\n    }\n    return result.join(delim);\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { Arc } from './core/Arc.js';\nimport { Host } from './core/Host.js';\nimport { Store } from './core/Store.js';\nimport { EventEmitter } from './core/EventEmitter.js';\nimport { logFactory } from './utils/log.js';\nimport { makeId } from './utils/id.js';\nconst log = logFactory(logFactory.flags.runtime, 'runtime', '#873600');\nconst particleFactoryCache = {};\nconst storeFactories = {};\nconst { keys } = Object;\nexport class Runtime extends EventEmitter {\n    log;\n    uid; // user id\n    nid; // network id\n    arcs;\n    stores;\n    peers;\n    shares;\n    endpoint;\n    network;\n    surfaces;\n    persistor;\n    prettyUid;\n    static securityLockdown;\n    static particleIndustry;\n    static particleOptions;\n    constructor(uid) {\n        uid = uid || 'user';\n        super();\n        this.arcs = {};\n        this.surfaces = {};\n        this.stores = {};\n        this.peers = new Set();\n        this.shares = new Set();\n        this.setUid(uid);\n        this.log = logFactory(logFactory.flags.runtime, `runtime:[${this.prettyUid}]`, '#873600');\n        //Runtime.securityLockdown?.(Runtime.particleOptions);\n    }\n    setUid(uid) {\n        this.uid = uid;\n        this.nid = `${uid}:${makeId(1, 2)}`;\n        this.prettyUid = uid.substring(0, uid.indexOf('@') + 1) || uid;\n    }\n    async bootstrapArc(name, meta, surface, service) {\n        // make an arc on `surface`\n        const arc = new Arc(name, meta, surface);\n        // install service handler\n        arc.hostService = this.serviceFactory(service);\n        // add `arc` to runtime\n        await this.addArc(arc);\n        // fin\n        return arc;\n    }\n    serviceFactory(service) {\n        return async (host, request) => service.handle(this, host, request);\n    }\n    // TODO(sjmiles): duplication vis a vis `installParticle`\n    // used by? ... [ParticleCook.js]\n    async bootstrapParticle(arc, id, meta) {\n        // make a host\n        const host = new Host(id);\n        // make a particle\n        await this.marshalParticle(host, meta);\n        // add `host` to `arc`\n        await arc.addHost(host);\n        // report\n        log('bootstrapped particle', id);\n        //log(host);\n        return host;\n    }\n    // no-op surface mapping\n    addSurface(id, surface) {\n        this.surfaces[id] = surface;\n    }\n    getSurface(id) {\n        return this.surfaces[id];\n    }\n    // map arcs by arc.id\n    addArc(arc) {\n        const { id } = arc;\n        if (id && !this.arcs[id]) {\n            return this.arcs[id] = arc;\n        }\n        throw `arc has no id, or id \"${id}\" is already in use`;\n    }\n    removeArc(arc) {\n        const { id } = arc;\n        if (!id || !this.arcs[id]) {\n            throw !id ? `arc has no id` : `id \"${id}\" is not in use`;\n        }\n        delete this.arcs[id];\n    }\n    // create a particle inside of host\n    async marshalParticle(host, particleMeta) {\n        const particle = await this.createParticle(host, particleMeta.kind);\n        return host.installParticle(particle, particleMeta);\n    }\n    // create a host, install a particle, add host to arc\n    // TODO(sjmiles): duplication vis a vis `bootstrapParticle`\n    // used by? ... [ArcsWorker.js]\n    async installParticle(arc, particleMeta, name) {\n        this.log('installParticle', name, particleMeta, arc.id);\n        // provide a default name\n        name = name || makeId();\n        // deduplicate name\n        if (arc.hosts[name]) {\n            let n = 1;\n            for (; (arc.hosts[`${name}-${n}`]); n++)\n                ;\n            name = `${name}-${n}`;\n        }\n        // build the structure\n        const host = new Host(name);\n        await this.marshalParticle(host, particleMeta);\n        await arc.addHost(host);\n        return host;\n    }\n    // TODO(sjmiles): third version to rule them all; bring your own host\n    async addParticle(arc, host, particleMeta, name) {\n        this.log('addParticle', arc.id, name, particleMeta, arc.id);\n        await this.marshalParticle(host, particleMeta);\n        await arc.addHost(host);\n        return host;\n        // this.log('addParticle', name, particleMeta, arc.id);\n        // // provide a default name\n        // name = name || makeId();\n        // // deduplicate name\n        // if (arc.hosts[name]) {\n        //   let n = 1;\n        //   for (; (arc.hosts[`${name}-${n}`]); n++);\n        //   name = `${name}-${n}`;\n        // }\n        // // build the structure\n        // const host = new Host(name);\n        // await this.marshalParticle(host, particleMeta);\n        // await arc.addHost(host);\n        // return host;\n    }\n    idFromName(name, list) {\n        // provide a default name\n        let id = name || makeId();\n        // deduplicate name\n        if (list[id]) {\n            let n = 1;\n            for (; (list[`${id}-${n}`]); n++)\n                ;\n            id = `${id}-${n}`;\n        }\n        // return unique id\n        return id;\n    }\n    // map a store by a Runtime-specific storeId\n    // Stores have no intrinsic id\n    addStore(storeId, store) {\n        // if the store needs to discuss things with Runtime\n        // TODO(sjmiles): this is likely unsafe for re-entry\n        if (store.marshal) {\n            store.marshal(this);\n        }\n        // bind to persist/restore functions\n        store.persist = async () => this.persistStore(storeId, store);\n        store.restore = async () => this.restoreStore(storeId, store);\n        // override the Store's own persistor to use the runtime persistor\n        // TODO(sjmiles): why?\n        // if (store.persistor) {\n        //   store.persistor.persist = store => this.persistor?.persist(storeId, store);\n        // }\n        // bind this.storeChanged to store.change (and name the binding)\n        const name = `${this.nid}:${storeId}-changed`;\n        const onChange = this.storeChanged.bind(this, storeId);\n        store.listen('change', onChange, name);\n        // map the store\n        this.stores[storeId] = store;\n        // evaluate for sharing\n        this.maybeShareStore(storeId);\n        // notify listeners that a thing happened\n        // TODO(sjmiles): makes no sense without id\n        //this.fire('store-added', store);\n    }\n    async persistStore(storeId, store) {\n        if (store.shouldPersist()) {\n            this.log(`persistStore \"${storeId}\"`);\n            return this.persistor?.persist?.(storeId, store.data);\n        }\n    }\n    async restoreStore(storeId, store) {\n        if (store.shouldPersist()) {\n            this.log(`restoreStore \"${storeId}\"`);\n            return this.persistor?.restore?.(storeId);\n        }\n    }\n    storeChanged(storeId, store) {\n        this.log('storeChanged', storeId);\n        this.network?.invalidatePeers(storeId);\n        this.onStoreChange(storeId, store);\n        this.fire('store-changed', { storeId, store });\n    }\n    // TODO(sjmiles): evacipate this method\n    onStoreChange(storeId, store) {\n        // override for bespoke response\n    }\n    do(storeId, task) {\n        task(this.stores[storeId]);\n    }\n    removeStore(storeId) {\n        this.do(storeId, store => {\n            store?.unlisten('change', `${this.nid}:${storeId}-changed`);\n        });\n        delete this.stores[storeId];\n    }\n    maybeShareStore(storeId) {\n        this.do(storeId, store => {\n            if (store?.is('shared')) {\n                this.shareStore(storeId);\n            }\n        });\n    }\n    addPeer(peerId) {\n        this.peers.add(peerId);\n        [...this.shares].forEach(storeId => this.maybeShareStoreWithPeer(storeId, peerId));\n    }\n    shareStore(storeId) {\n        this.shares.add(storeId);\n        [...this.peers].forEach(peerId => this.maybeShareStoreWithPeer(storeId, peerId));\n    }\n    maybeShareStoreWithPeer(storeId, peerId) {\n        this.do(storeId, store => {\n            const nid = this.uid.replace(/\\./g, '_');\n            if (!store.is('private') || (peerId.startsWith(nid))) {\n                this.shareStoreWithPeer(storeId, peerId);\n            }\n        });\n    }\n    shareStoreWithPeer(storeId, peerId) {\n        this.network?.shareStore(storeId, peerId);\n    }\n    async createParticle(host, kind) {\n        try {\n            const factory = await this.marshalParticleFactory(kind);\n            return factory?.(host);\n        }\n        catch (x) {\n            log.error(`createParticle(${kind}):`, x);\n        }\n    }\n    async marshalParticleFactory(kind) {\n        return particleFactoryCache[kind] ?? this.lateBindParticle(kind);\n    }\n    lateBindParticle(kind, code) {\n        const { particleOptions, particleIndustry, registerFactoryPromise } = Runtime;\n        if (!particleIndustry) {\n            throw `no ParticleIndustry to create '${kind}'`;\n        }\n        else {\n            const factoryPromise = particleIndustry(kind, { ...particleOptions, code });\n            registerFactoryPromise(kind, factoryPromise);\n            return factoryPromise;\n        }\n    }\n    static registerFactoryPromise(kind, factoryPromise) {\n        return particleFactoryCache[kind] = factoryPromise;\n    }\n    requireStore(meta) {\n        let store = this.stores[meta.name];\n        if (!store) {\n            store = this.createStore(meta);\n            this.addStore(meta.name, store);\n        }\n        return store;\n    }\n    createStore(meta) {\n        const key = keys(storeFactories).find(tag => meta.tags?.includes?.(tag));\n        const storeClass = storeFactories[String(key)] || Store;\n        return new storeClass(meta);\n    }\n    static registerStoreClass(tag, storeClass) {\n        storeFactories[tag] = storeClass;\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nconst log = logFactory(logFactory.flags.recipe, 'RecipeParser', 'violet');\nconst { entries, create } = Object;\nexport class Parser {\n    stores;\n    particles;\n    slots;\n    meta;\n    constructor(recipe) {\n        this.stores = [];\n        this.particles = [];\n        this.slots = [];\n        this.meta = create(null);\n        if (recipe) {\n            this.parse(recipe);\n        }\n    }\n    parse(recipe) {\n        // `normalize` converts shorthand to longhand before parsing\n        const normalized = this.normalize(recipe);\n        this.parseSlotSpec(normalized, 'root', '');\n        return this;\n    }\n    normalize(recipe) {\n        if (typeof recipe !== 'object') {\n            throw Error('recipe must be an Object');\n        }\n        // TODO(sjmiles): would be great if `normalize` normalized all the things\n        return recipe;\n    }\n    parseSlotSpec(spec, slotName, parentName) {\n        // process entries\n        for (const key in spec) {\n            switch (key) {\n                case '$meta':\n                    // value is a dictionary\n                    this.meta = { ...this.meta, ...spec.$meta };\n                    break;\n                case '$stores':\n                    // value is a StoreSpec\n                    this.parseStoresNode(spec.$stores);\n                    break;\n                default: {\n                    // value is a ParticleSpec\n                    const container = parentName ? `${parentName}#${slotName}` : slotName;\n                    this.parseParticleSpec(container, key, spec[key]);\n                    break;\n                }\n            }\n        }\n    }\n    parseStoresNode(stores) {\n        for (const key in stores) {\n            this.parseStoreSpec(key, stores[key]);\n        }\n    }\n    parseStoreSpec(name, spec) {\n        if (this.stores.find(s => s.name === name)) {\n            log('duplicate store name');\n            return;\n        }\n        const meta = {\n            name,\n            type: spec.$type,\n            tags: spec.$tags,\n            value: spec.$value\n        };\n        this.stores.push(meta);\n    }\n    parseParticleSpec(container, id, spec) {\n        if (!spec.$kind) {\n            log.warn(`parseParticleSpec: malformed spec has no \"kind\":`, spec);\n            throw Error();\n        }\n        if (this.particles.find(s => s.id === id)) {\n            log('duplicate particle name', id, spec);\n            return;\n        }\n        this.particles.push({ id, container, spec });\n        if (spec.$slots) {\n            this.parseSlotsNode(spec.$slots, id);\n        }\n    }\n    parseSlotsNode(slots, parent) {\n        entries(slots).forEach(([key, spec]) => this.parseSlotSpec(spec, key, parent));\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nexport function matches(candidateMeta, targetMeta) {\n    for (const property in targetMeta) {\n        if (candidateMeta[property] !== targetMeta[property]) {\n            return false;\n        }\n    }\n    return true;\n}\n;\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nimport { matches } from '../utils/matching.js';\nconst log = logFactory(logFactory.flags.recipe, 'StoreCook', '#99bb15');\nconst { values } = Object;\nconst mapStore = (runtime, { name, type }) => {\n    return findStores(runtime, { name, type })?.[0];\n};\nconst findStores = (runtime, criteria) => {\n    return values(runtime.stores).filter(store => storeMatches(store, criteria));\n};\nconst storeMatches = (store, criteria) => {\n    // TODO(b/244191110): Type matching API to be wired here.\n    const { type, ...other } = criteria;\n    if (typeMatches(type, store?.meta.type)) {\n        // generic object comparison\n        return matches(store?.meta, other);\n    }\n};\nconst typeMatches = (typeA, typeB) => {\n    const baseTypes = ['pojo', 'json'];\n    return (typeA === typeB)\n        || baseTypes.includes(typeA?.toLowerCase())\n        || baseTypes.includes(typeB?.toLowerCase());\n};\nexport class StoreCook {\n    static async execute(runtime, arc, stores) {\n        return this.forEachStore(this.realizeStore, runtime, arc, stores);\n    }\n    static async evacipate(runtime, arc, stores) {\n        return this.forEachStore(this.derealizeStore, runtime, arc, stores);\n    }\n    static async forEachStore(task, runtime, arc, stores) {\n        return Promise.all(stores.map(store => task.call(this, runtime, arc, store)));\n    }\n    static async realizeStore(runtime, arc, rawMeta) {\n        // potential initialization value\n        let value;\n        // build a StoreMeta out of parts\n        const meta = this.constructMeta(runtime, arc, rawMeta);\n        // do we already own this Store?\n        let store = mapStore(runtime, meta);\n        if (store) {\n            // use a Store\n            log(`realizeStore: mapping \"${rawMeta.name}\" to \"${store.meta.name}\"`);\n        }\n        else {\n            log(`realizeStore: creating \"${meta.name}\"`);\n            // create a Store\n            store = StoreCook.createStore(runtime, meta);\n            // default initial value comes from meta\n            value = meta?.value;\n            // persisted value may override default\n            if (store.shouldPersist()) {\n                const cached = await store.restore();\n                value = (cached == null) ? value : cached;\n            }\n        }\n        // we have a store for the Arc now\n        arc.addStore(meta.name, store);\n        // it may need a starting value\n        if (value !== undefined) {\n            log(`setting data to:`, value);\n            store.data = value;\n        }\n    }\n    static createStore(runtime, meta) {\n        // we need to create this Store\n        const store = runtime.createStore(meta);\n        runtime.addStore(meta.name, store);\n        return store;\n    }\n    static async derealizeStore(runtime, arc, meta) {\n        log(`derealizeStore: derealizing \"${meta.name}\"`);\n        runtime.removeStore(meta.name);\n        arc.removeStore(meta.name);\n    }\n    static async removeStores(runtime, arc, storeNames) {\n        storeNames.forEach(name => {\n            runtime.removeStore(name);\n            arc.removeStore(name);\n        });\n    }\n    static constructMeta(runtime, arc, rawMeta) {\n        const meta = {\n            ...rawMeta,\n            arcid: arc.id,\n            uid: runtime.uid,\n        };\n        return {\n            ...meta,\n            owner: meta.uid,\n            shareid: `${meta.name}:${meta.arcid}:${meta.uid}`\n        };\n    }\n    static specToMeta(name, spec) {\n        return {\n            name,\n            type: spec.$type,\n            tags: spec.$tags,\n            value: spec.$value\n        };\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nconst log = logFactory(logFactory.flags.recipe, 'ParticleCook', '#5fa530');\nexport class ParticleCook {\n    static async execute(runtime, arc, particles) {\n        // serial\n        for (const particle of particles) {\n            await this.realizeParticle(runtime, arc, particle);\n        }\n        // parallel\n        //return Promise.all(particles.map(particle => this.realizeParticle(runtime, arc, particle)));\n    }\n    static async realizeParticle(runtime, arc, node) {\n        log('realizedParticle:', node.id);\n        // convert spec to metadata\n        const meta = this.specToMeta(node.spec);\n        meta.container ||= node.container;\n        // make a (hosted) particle\n        return runtime.bootstrapParticle(arc, node.id, meta);\n    }\n    static specToMeta(spec) {\n        if (spec.$bindings) {\n            log.warn(`Particle '${spec.$kind}' spec contains deprecated $bindings property (${JSON.stringify(spec.$bindings)})`);\n        }\n        // TODO(sjmiles): impedance mismatch here is likely to cause problems\n        const { $kind: kind, $container: container, $staticInputs: staticInputs } = spec;\n        const inputs = this.formatBindings(spec.$inputs);\n        const outputs = this.formatBindings(spec.$outputs);\n        return { kind, staticInputs, inputs, outputs, container };\n    }\n    static formatBindings(bindings) {\n        return bindings?.map?.(binding => typeof binding === 'string' ? { [binding]: binding } : binding);\n    }\n    static async evacipate(runtime, arc, particles) {\n        return Promise.all(particles.map(particle => this.derealizeParticle(runtime, arc, particle)));\n    }\n    static async derealizeParticle(runtime, arc, node) {\n        arc.removeHost(node.id);\n    }\n    static async removeParticles(arc, particleIds) {\n        particleIds.forEach(id => arc.removeHost(id));\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nimport { Parser } from './RecipeParser.js';\nimport { StoreCook } from './StoreCook.js';\nimport { ParticleCook } from './ParticleCook.js';\nconst log = logFactory(logFactory.flags.recipe, 'Chef', '#087f23');\nexport class Chef {\n    static async execute(recipe, runtime, arc) {\n        if (arc instanceof Promise) {\n            log.error('`arc` must be an Arc, not a Promise. Make sure `boostrapArc` is awaited.');\n            return;\n        }\n        //log.groupCollapsed('executing recipe...', recipe.$meta);\n        log('|-->...| executing recipe: ', recipe);\n        const plan = new Parser(recipe);\n        // `store` preparation\n        await StoreCook.execute(runtime, arc, plan.stores);\n        // `particle` preparation\n        await ParticleCook.execute(runtime, arc, plan.particles);\n        // seasoning\n        // TODO(sjmiles): what do we use this for?\n        arc.meta = { ...arc.meta, ...plan.meta };\n        log('|...-->| recipe complete: ', recipe.$meta ?? '');\n        //log.groupEnd();\n    }\n    static async evacipate(recipe, runtime, arc) {\n        //log.groupCollapsed('evacipating recipe...', recipe.$meta);\n        log('|-->...| evacipating recipe: ', recipe.$meta);\n        // TODO(sjmiles): this is work we already did\n        const plan = new Parser(recipe);\n        // `store` work\n        // TODO(sjmiles): not sure what stores are unique to this plan\n        await StoreCook.evacipate(runtime, arc, plan.stores);\n        // `particle` work\n        await ParticleCook.evacipate(runtime, arc, plan.particles);\n        // seasoning\n        // TODO(sjmiles): doh\n        //arc.meta = {...arc.meta, ...plan.meta};\n        log('|...-->| recipe evacipated: ', recipe.$meta);\n        //log.groupEnd();\n    }\n    static async executeAll(recipes, runtime, arc) {\n        for (const recipe of recipes) {\n            await this.execute(recipe, runtime, arc);\n        }\n    }\n    static async evacipateAll(recipes, runtime, arc) {\n        for (const recipe of recipes) {\n            await this.evacipate(recipe, runtime, arc);\n        }\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nimport { deepEqual } from '../utils/object.js';\nimport { StoreCook } from './StoreCook.js';\nimport { ParticleCook } from './ParticleCook.js';\nconst log = logFactory(logFactory.flags.graph, 'Graphinator', '#7f0823');\nconst { assign, create } = Object;\nconst entries = (o) => Object.entries(o ?? Object);\nconst keys = (o) => Object.keys(o ?? Object);\nconst values = (o) => Object.values(o ?? Object);\nconst idDelim = ':';\nexport class Graphinator {\n    runtime;\n    arc;\n    nodeTypes;\n    storeTags;\n    constructor(nodeTypes, runtime, arc) {\n        this.runtime = runtime;\n        this.arc = arc;\n        this.nodeTypes = {};\n        this.storeTags = {};\n        keys(nodeTypes).forEach(t => this.nodeTypes[t] = this.flattenNodeType(nodeTypes[t]));\n    }\n    flattenNodeType(nodeType, $container, flatNodeType) {\n        flatNodeType ??= {};\n        keys(nodeType).forEach(key => {\n            if (key.startsWith('$')) {\n                flatNodeType[key] = { ...nodeType[key], ...(flatNodeType[key] || {}) };\n            }\n            else {\n                assign(flatNodeType, this.flattenParticleSpec(key, nodeType[key], $container, flatNodeType));\n            }\n        });\n        return flatNodeType;\n    }\n    flattenParticleSpec(particleId, particleSpec, $container, flatNodeType) {\n        const flattened = {\n            [particleId]: {\n                ...particleSpec,\n                $slots: {},\n                ...($container && { $container })\n            }\n        };\n        entries(particleSpec.$slots || {}).forEach(([slotId, slotRecipe]) => {\n            assign(flattened, this.flattenNodeType(slotRecipe, `${particleId}#${slotId}`, flatNodeType));\n            flattened[particleId].$slots[slotId] = {};\n        });\n        return flattened;\n    }\n    async execute(graph, { id: layoutId, defaultContainer }) {\n        const layout = graph.layout?.[layoutId || 'preview'];\n        const stores = [];\n        const particles = [];\n        values(graph.nodes).forEach(node => {\n            const nodeType = this.nodeTypes[node.type];\n            if (!nodeType) {\n                throw (`node.type \"${node.type}\" not found`);\n            }\n            const connsMap = {};\n            this.prepareStores(node, nodeType, stores, connsMap);\n            this.prepareParticles(node, layout, defaultContainer, connsMap, particles);\n        });\n        this.retagStoreSpecs(stores);\n        log('Executing', { graph, stores, particles });\n        //log('Executing graph: ', stores, particles);\n        await StoreCook.execute(this.runtime, this.arc, stores);\n        await this.realizeParticles(particles);\n        return particles.map(({ id }) => id);\n    }\n    prepareStores({ id, connections, props }, nodeType, stores, connsMap) {\n        entries(nodeType.$stores).forEach(([name, store]) => {\n            connsMap[name] = [];\n            const storeId = this.constructId(id, name);\n            const storeValue = props?.[name] || store.$value;\n            const storeConns = connections?.[name];\n            this.prepareStore(storeId, store, storeValue, storeConns, stores, connsMap[name]);\n        });\n    }\n    prepareStore(storeId, { $type: type, $tags }, value, connections, stores, storeEntry) {\n        if (connections) {\n            connections?.forEach?.(connId => this.addStore(connId, $tags, storeEntry));\n        }\n        else {\n            stores.push({ name: storeId, type, value });\n            this.addStore(storeId, $tags, storeEntry);\n        }\n    }\n    addStore(storeId, tags, storeEntry) {\n        storeEntry.push({ id: storeId });\n        this.storeTags[storeId] = [...(this.storeTags[storeId] || []), ...(tags || [])];\n    }\n    retagStoreSpecs(stores) {\n        stores.forEach(store => store.tags = this.storeTags[store.name]);\n    }\n    resolveIoGroup(bindings, storeMap) {\n        return bindings?.map(coded => {\n            const { key, binding } = this.decodeBinding(coded);\n            const task = (store, index) => ({ [`${key}${index === 0 ? '' : index}`]: store });\n            return storeMap[binding || key]?.map(({ id }, i) => task(id, i));\n        }).flat().filter(i => i);\n    }\n    decodeBinding(value) {\n        if (typeof value === 'string') {\n            return { key: value, binding: '' };\n        }\n        else {\n            const [key, binding] = entries(value)[0];\n            return { key, binding };\n        }\n    }\n    prepareParticles(node, layout, defaultContainer, storeMap, particles) {\n        const nodeType = this.nodeTypes[node.type];\n        const containerId = this.constructId(node.id, 'Container');\n        const container = layout?.[containerId] || defaultContainer;\n        this.getNodeParticleNames(nodeType).forEach(name => {\n            particles.push(this.prepareParticle(node, name, container, nodeType, storeMap));\n        });\n    }\n    prepareParticle({ id, props }, particleName, container, nodeType, storeMap) {\n        const particleId = this.constructId(id, particleName);\n        const spec = nodeType[particleName];\n        const $staticInputs = Object.assign({}, props || {}, spec.$staticInputs || {});\n        return {\n            id: particleId,\n            spec: {\n                $kind: spec.$kind,\n                $staticInputs,\n                $inputs: this.resolveIoGroup(spec.$inputs, storeMap),\n                $outputs: this.resolveIoGroup(spec.$outputs, storeMap),\n                $slots: {},\n                $container: this.resolveContainer(id, spec.$container, container)\n            }\n        };\n    }\n    constructId(id, name) {\n        return `${id ? `${id}${idDelim}` : ''}${name}`;\n    }\n    resolveContainer(id, containerName, defaultContainer) {\n        return containerName ? this.constructId(id, containerName) : defaultContainer;\n    }\n    async realizeParticles(particles) {\n        const runningParticles = particles.filter(({ id }) => this.arc.hosts[id]);\n        runningParticles.forEach(particle => this.updateParticleHosts(particle));\n        const newParticles = particles.filter(({ id }) => !this.arc.hosts[id]);\n        await ParticleCook.execute(this.runtime, this.arc, newParticles);\n        const removedParticles = this.findRemovedParticles(particles);\n        await ParticleCook.evacipate(this.runtime, this.arc, removedParticles);\n    }\n    findRemovedParticles(particles) {\n        const runningGraphParticleIds = keys(this.arc.hosts).filter(id => {\n            const container = this.arc.hosts[id].meta.container;\n            if (container?.includes('designer#graph')) {\n                return true;\n            }\n            // if (container === 'designer#graph') {\n            //   return true;\n            // }\n            const containerParticle = container?.split('#')?.[0];\n            return particles.some(({ id }) => id === containerParticle);\n        });\n        const removedParticleIds = runningGraphParticleIds.filter(id => !particles.some(({ id: graphId }) => id === graphId));\n        return removedParticleIds.map(id => ({ id }));\n    }\n    updateParticleHosts({ id, spec }) {\n        const host = this.arc.hosts[id];\n        if (host.container !== spec.$container) {\n            host.meta.container = spec.$container;\n            Object.values(this.arc.hosts).forEach(host => host.rerender());\n        }\n        const meta = ParticleCook.specToMeta(spec);\n        if (!deepEqual(meta, host.meta)) {\n            host.meta = meta;\n            this.arc.updateHost(host);\n        }\n    }\n    async evacipate(graph) {\n        log('Evacipating graph', graph);\n        await StoreCook.removeStores(this.runtime, this.arc, this.getStoreNames(graph));\n        await ParticleCook.removeParticles(this.arc, this.getParticleNames(graph));\n    }\n    getParticleNames(graph) {\n        const names = [];\n        values(graph.nodes).forEach(({ id, type }) => {\n            this.getNodeParticleNames(this.nodeTypes[type]).forEach(name => names.push(this.constructId(id, name)));\n        });\n        return names;\n    }\n    getNodeParticleNames(nodeType) {\n        return keys(nodeType).filter(id => !id.startsWith('$'));\n    }\n    getStoreNames(graph) {\n        const names = [];\n        values(graph.nodes).forEach(({ id, type }) => {\n            const nodeType = this.nodeTypes[type];\n            keys(nodeType.$stores).forEach(storeId => {\n                names.push(this.constructId(id, storeId));\n            });\n        });\n        return names;\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { Paths } from '../utils/paths.js';\nimport { logFactory } from '../utils/log.js';\nconst log = logFactory(logFactory.flags.code, 'code', 'gold', '#333');\nconst defaultParticleBasePath = '$arcs/core/Particle.js';\n// acquire particle code\n// `kind` describes the particle\n// `options.code` may simply provide code directly\nexport const requireParticleImplCode = async (kind, options) => {\n    const code = options?.code || await fetchParticleCode(kind);\n    // TODO(sjmiles): brittle content processing, needs to be documented\n    return code.slice(code.indexOf('({'));\n};\nexport const fetchParticleCode = async (kind) => {\n    if (kind) {\n        return await maybeFetchParticleCode(kind);\n    }\n    log.error(`fetchParticleCode: empty 'kind'`);\n};\nexport const maybeFetchParticleCode = async (kind) => {\n    const path = pathForKind(kind);\n    try {\n        const response = await fetch(path);\n        if (response.ok) {\n            return await response.text();\n        }\n        else {\n            throw '';\n        }\n    }\n    catch (x) {\n        log.error(`could not locate implementation for particle \"${kind}\" [${path}]`);\n    }\n};\nexport const pathForKind = (kind) => {\n    if (kind) {\n        if (!'$./'.includes(kind[0]) && !kind.includes('://')) {\n            kind = `$library/${kind}`;\n        }\n        if (!kind?.split('/').pop().includes('.')) {\n            kind = `${kind}.js`;\n        }\n        return Paths.resolve(kind);\n    }\n    return '404';\n};\n// acquire Particle.js\nexport const requireParticleBaseCode = async (sourcePath) => {\n    if (!requireParticleBaseCode.source) {\n        const path = Paths.resolve(sourcePath || defaultParticleBasePath);\n        log('particle base code path: ', path);\n        const response = await fetch(path);\n        const moduleText = await response.text() + \"\\n//# sourceURL=\" + path + \"\\n\";\n        requireParticleBaseCode.source = moduleText.replace(/export /g, '');\n    }\n    return requireParticleBaseCode.source;\n};\nrequireParticleBaseCode.source = null;\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nexport const PathMapper = class {\n    map;\n    constructor(root) {\n        this.map = {};\n        this.setRoot(root);\n    }\n    add(mappings) {\n        Object.assign(this.map, mappings || {});\n    }\n    resolve(path) {\n        let last;\n        do {\n            path = this._resolve(last = path);\n        } while (last !== path);\n        return path;\n    }\n    _resolve(path) {\n        const bits = path.split('/');\n        const top = bits.shift();\n        const prefix = this.map[top] || top;\n        return [prefix, ...bits].join('/');\n    }\n    setRoot(root) {\n        if (root.length && root[root.length - 1] === '/') {\n            root = root.slice(0, -1);\n        }\n        this.add({\n            '$root': root,\n            '$arcs': root\n        });\n    }\n    getAbsoluteHereUrl(meta, depth) {\n        // you are here\n        const localRelative = meta.url.split('/').slice(0, -(depth ?? 1)).join('/');\n        if (!globalThis?.document) {\n            return localRelative;\n        }\n        else {\n            // document root is here\n            let base = document.URL;\n            // if document URL has a filename, remove it\n            if (base[base.length - 1] !== '/') {\n                base = `${base.split('/').slice(0, -1).join('/')}/`;\n            }\n            // create absoute path to here (aka 'local')\n            let localAbsolute = new URL(localRelative, base).href;\n            // no trailing slash!\n            if (localAbsolute[localAbsolute.length - 1] === '/') {\n                localAbsolute = localAbsolute.slice(0, -1);\n            }\n            return localAbsolute;\n        }\n    }\n};\nconst root = import.meta.url.split('/').slice(0, -3).join('/');\nexport const Paths = globalThis['Paths'] = new PathMapper(root);\nPaths.add(globalThis.config?.paths);\n", "/**\n * @license\n * Copyright (c) 2022 Google LLC All rights reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file.\n */\nexport * from './date.js';\nexport * from './id.js';\nexport * from './log.js';\nexport * from './matching.js';\nexport * from './object.js';\nexport * from './paths.js';\nexport * from './rand.js';\nexport * from './task.js';\n", "/**\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nexport const computeAgeString = (date, now) => {\n    let deltaTime = Math.round((now - date) / 1000);\n    if (isNaN(deltaTime)) {\n        return `\u2022`;\n    }\n    let plural = '';\n    if (deltaTime < 60) {\n        if (deltaTime > 1)\n            plural = 's';\n        return `${deltaTime} second${plural} ago`;\n    }\n    deltaTime = Math.round(deltaTime / 60);\n    if (deltaTime < 60) {\n        if (deltaTime > 1)\n            plural = 's';\n        return `${deltaTime} minute${plural} ago`;\n    }\n    deltaTime = Math.round(deltaTime / 60);\n    if (deltaTime < 24) {\n        if (deltaTime > 1)\n            plural = 's';\n        return `${deltaTime} hour${plural} ago`;\n    }\n    deltaTime = Math.round(deltaTime / 24);\n    if (deltaTime < 30) {\n        if (deltaTime > 1)\n            plural = 's';\n        return `${deltaTime} day${plural} ago`;\n    }\n    deltaTime = Math.round(deltaTime / 30);\n    if (deltaTime < 12) {\n        if (deltaTime > 1)\n            plural = 's';\n        return `${deltaTime} month${plural} ago`;\n    }\n    deltaTime = Math.round(deltaTime / 12);\n    if (deltaTime > 1)\n        plural = 's';\n    return `${deltaTime} year${plural} ago`;\n};\n", "/**\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\n/**\n * Perform `action` if `delay` ms have elapsed since last debounce call for `key`.\n *\n * ```\n * // invoke 'task' one second after last time this line executed\n * this.debounceTask = debounce(this.debounceTask, task, 1000);\n * ```\n */\nexport const debounce = (key, action, delay) => {\n    if (key) {\n        clearTimeout(key);\n    }\n    if (action && delay) {\n        return setTimeout(action, delay);\n    }\n};\nexport const async = task => {\n    return async (...args) => {\n        await Promise.resolve();\n        task(...args);\n    };\n};\nexport const asyncTask = (task, delayMs) => {\n    setTimeout(task, delayMs ?? 0);\n};\n", "/**\n * @license\n * Copyright (c) 2022 Google LLC All rights reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file.\n */\nexport * from '../js/Runtime.js';\nexport * from '../js/core/EventEmitter.js';\nexport * from '../js/core/Store.js';\nexport * from '../js/core/Arc.js';\nexport * from '../js/core/Host.js';\nexport * from '../js/core/Decorator.js';\nexport * from '../js/recipe/Chef.js';\nexport * from '../js/recipe/Graphinator.js';\nexport * from '../js/recipe/ParticleCook.js';\nexport * from '../js/recipe/StoreCook.js';\nexport * from '../js/recipe/RecipeParser.js';\nexport * as code from '../js/isolation/code.js';\n\nimport * as utils from '../js/utils/utils.js';\nconst {logFactory, Paths} = utils;\nexport {logFactory, Paths, utils};\n\nconst root = import.meta.url.split('/').slice(0, -1).join('/');\nPaths.setRoot(root);\n"],
  "mappings": ";;;;;;;;;;;;AAQO,IAAM,eAAN,MAAmB;AAAA,EAEtB,YAAY,CAAC;AAAA,EACb,kBAAkB,WAAW;AACzB,WAAO,KAAK,UAAU,eAAe,KAAK,UAAU,aAAa,CAAC;AAAA,EACtE;AAAA,EACA,KAAK,cAAc,MAAM;AACrB,UAAM,YAAY,KAAK,kBAAkB,SAAS;AAClD,QAAI,WAAW,SAAS;AACpB,gBAAU,QAAQ,cAAY,SAAS,GAAG,IAAI,CAAC;AAAA,IACnD;AAAA,EACJ;AAAA,EACA,OAAO,WAAW,UAAU,cAAc;AACtC,UAAM,YAAY,KAAK,kBAAkB,SAAS;AAClD,cAAU,KAAK,QAAQ;AACvB,aAAS,QAAQ,gBAAgB;AACjC,WAAO;AAAA,EACX;AAAA,EACA,SAAS,WAAW,UAAU;AAC1B,UAAM,OAAO,KAAK,kBAAkB,SAAS;AAC7C,UAAM,QAAS,OAAO,aAAa,WAAY,KAAK,UAAU,OAAK,EAAE,UAAU,QAAQ,IAAI,KAAK,QAAQ,QAAQ;AAChH,QAAI,SAAS,GAAG;AACZ,WAAK,OAAO,OAAO,CAAC;AAAA,IACxB,OACK;AACD,cAAQ,KAAK,2BAA2B,SAAS;AAAA,IACrD;AAAA,EACJ;AACJ;;;AC5BO,IAAM,WAAW,CAAC,OAAO,SAAS,kBAAkB,YAAY,KAAK;AACrE,IAAM,WAAW,CAAC,QAAQ,OAAO;;;ACAxC,IAAM,EAAE,YAAY,IAAI;AACxB,IAAM,cAAc,CAAC,QAAQ,UAAU,IAAI,OAAO,OAAO,UAAU;AAC/D,MAAI,OAAO,WAAW,UAAU;AAC5B,aAAS,WAAW,MAAM;AAAA,EAC9B;AACA,MAAI,CAAC,QAAQ;AACT,WAAO,MAAM;AAAA,IAAE;AAAA,EACnB;AACA,MAAI,SAAS,OAAO;AAChB,WAAO,QAAQ,IAAI,KAAK,OAAO;AAAA,EACnC;AACA,QAAM,QAAQ,eAAe,MAAM,kBAAkB,SAAS;AAC9D,SAAO,QAAQ,MAAM,KAAK,SAAS,KAAK,YAAY,KAAK;AAC7D;AACO,IAAM,aAAa,CAAC,QAAQ,UAAU,KAAK,IAAI,QAAQ,OAAO;AACjE,QAAM,eAAe,YAAY,SAAS,IAAI,UAAQ,CAAC,MAAM,YAAY,QAAQ,UAAU,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC;AAC7G,QAAM,eAAe,YAAY,SAAS,IAAI,UAAQ,CAAC,MAAM,YAAY,MAAM,UAAU,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC;AAC3G,QAAM,UAAU,EAAE,GAAG,cAAc,GAAG,aAAa;AAEnD,QAAMA,OAAM,QAAQ;AACpB,SAAO,OAAOA,MAAK,OAAO;AAC1B,SAAOA;AACX;AACA,WAAW,QAAQ,WAAW,QAAQ,YAAY,CAAC;;;ACxBnD,IAAM,mBAAmB,CAAC,OAAO,WAAW,WAAW,MAAM,KAAK,QAAQ,OAAO,WAAW;AAC5F,IAAM,EAAE,QAAQ,OAAO,IAAI;AAC3B,IAAM,UAAU,CAAC,MAAM,OAAO,QAAQ,KAAK,MAAM;AACjD,IAAM,OAAO,CAAC,MAAM,OAAO,KAAK,KAAK,MAAM;AAC3C,IAAM,SAAS,CAAC,MAAM,OAAO,OAAO,KAAK,MAAM;AAC/C,IAAM,MAAM,MAAM,OAAO,IAAI;AACtB,IAAM,MAAN,cAAkB,aAAa;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY,IAAI,MAAM,SAAS;AAC3B,UAAM;AACN,SAAK,KAAK;AACV,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,QAAQ,IAAI;AACjB,SAAK,SAAS,IAAI;AAClB,SAAK,MAAM,iBAAiB,EAAE;AAAA,EAClC;AAAA,EACA,MAAM,QAAQ,MAAM,SAAS;AAEzB,UAAM,KAAK,eAAe;AAE1B,SAAK,MAAM,KAAK,MAAM;AACtB,SAAK,MAAM;AAIX,SAAK,WAAW,IAAI;AACpB,WAAO;AAAA,EACX;AAAA,EACA,MAAM,iBAAiB;AACnB,QAAI,CAAC,KAAK,YAAY,KAAK,SAAS;AAEhC,WAAK,WAAW,MAAM,KAAK,QAAQ,eAAe,MAAM;AAGxD,WAAK,SAAS,UAAU,KAAK,QAAQ,KAAK,IAAI;AAAA,IAClD;AAAA,EACJ;AAAA,EACA,WAAW;AACP,WAAO,KAAK,KAAK,EAAE,QAAQ,OAAK,EAAE,SAAS,CAAC;AAAA,EAChD;AAAA,EACA,WAAW,IAAI;AACX,SAAK,MAAM,KAAK,OAAO;AACvB,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EACA,SAAS,SAAS,OAAO;AACrB,QAAI,SAAS,CAAC,KAAK,OAAO,UAAU;AAChC,WAAK,OAAO,WAAW;AACvB,YAAM,OAAO,UAAU,MAAM,KAAK,aAAa,SAAS,KAAK,GAAG,KAAK,EAAE;AAAA,IAC3E;AAAA,EACJ;AAAA,EACA,YAAY,SAAS;AACjB,UAAM,QAAQ,KAAK,OAAO;AAC1B,QAAI,OAAO;AACP,YAAM,SAAS,UAAU,KAAK,EAAE;AAAA,IACpC;AACA,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,aAAa,SAAS,OAAO;AACzB,SAAK,IAAI,kBAAkB,UAAU;AACrC,UAAM,UAAU,YAAU,UAAU,OAAO,KAAK,WAAS,UAAU,OAAO,KAAK,EAAE,MAAM,WAAW,KAAK,KAAK,EAAE,MAAM,QAAQ;AAC5H,WAAO,KAAK,KAAK,EAAE,QAAQ,UAAQ;AAC/B,YAAM,SAAS,KAAK,MAAM;AAC1B,UAAI,WAAW,OAAO,QAAQ,MAAM,GAAG;AACnC,aAAK,IAAI,SAAS,KAAK,wBAAwB,UAAU;AAEzD,aAAK,WAAW,IAAI;AAAA,MACxB;AAAA,IACJ,CAAC;AACD,SAAK,KAAK,iBAAiB,OAAO;AAAA,EACtC;AAAA,EACA,mBAAmB,QAAQ,MAAM;AAC7B,UAAM,OAAO,KAAK,MAAM;AACxB,SAAK,OAAO;AACZ,SAAK,WAAW,IAAI;AAAA,EACxB;AAAA,EACA,WAAW,MAAM;AACb,SAAK,SAAS,KAAK,cAAc,IAAI;AAAA,EACzC;AAAA,EAGA,cAAc,MAAM;AAChB,UAAM,SAAS,IAAI;AAEnB,UAAM,WAAW,KAAK,MAAM;AAC5B,QAAI,aAAa,KAAK;AAIlB,cAAQ,KAAK,MAAM,EAAE,QAAQ,CAAC,CAAC,MAAM,KAAK,MAAM,OAAO,QAAQ,MAAM,IAAI;AAAA,IAC7E,OAEK;AAED,aAAO,QAAQ,KAAK,MAAM,YAAY;AAEtC,gBAAU,OAAO,OAAK,CAAC,EAAE,QAAQ,OAAK;AAElC,cAAM,CAAC,MAAM,OAAO,IAAI,QAAQ,CAAC,EAAE,IAAI,KAAK,CAAC;AAC7C,YAAI,QAAQ,SAAS;AAEjB,gBAAM,QAAQ,KAAK,OAAO,UAAU;AAEpC,cAAI,UAAU,QAAW;AACrB,mBAAO,QAAQ;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,WAAK,IAAI,iBAAiB,KAAK,SAAS,MAAM;AAAA,IAClD;AACA,WAAO;AAAA,EACX;AAAA,EAEA,cAAc,EAAE,IAAI,KAAK,GAAG,SAAS;AACjC,UAAM,QAAQ,KAAK,OAAO;AAC1B,QAAI,MAAM,WAAW,MAAM,QAAQ;AAC/B,YAAM,QAAQ,UAAQ,KAAK,aAAa,MAAM,QAAQ,OAAO,KAAK,OAAO,CAAC;AAC1E,WAAK,IAAI,SAAS,sBAAsB,OAAO;AAAA,IACnD;AAAA,EACJ;AAAA,EACA,aAAa,MAAM,QAAQ,SAAS;AAChC,QAAI,WAAW,QAAW;AACtB,YAAM,UAAU,KAAK,iBAAiB,SAAS,IAAI,KAAK;AACxD,YAAM,QAAQ,KAAK,OAAO;AAC1B,UAAI,CAAC,OAAO;AACR,YAAI,UAAU,OAAO;AACjB,eAAK,IAAI,KAAK,sBAAsB,8BAA8B,OAAO;AAAA,QAC7E;AAAA,MACJ,OACK;AAGD,aAAK,IAAI,mBAAmB,mCAAmC,YAAY,MAAM;AACjF,cAAM,OAAO;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,iBAAiB,SAAS,MAAM;AAC5B,UAAM,SAAS,SAAS,KAAK,CAAAC,YAAU,KAAKA,WAAU,CAAC,EAAE,OAAO,IAAI;AACpE,QAAI,QAAQ;AACR,aAAO,OAAO,MAAM,EAAE;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,MAAM,OAAO,QAAQ;AACjB,QAAI,KAAK,UAAU;AACf,WAAK,SAAS,OAAO,EAAE,GAAG,QAAQ,OAAO,KAAK,GAAG,CAAC;AAAA,IACtD,OACK;AAAA,IAEL;AAAA,EACJ;AAAA,EACA,QAAQ,KAAK,UAAU;AACnB,UAAM,OAAO,KAAK,MAAM;AACxB,QAAI,MAAM;AACN,WAAK,YAAY,QAAQ;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,MAAM,QAAQ,MAAM,SAAS;AACzB,QAAI,SAAS,MAAM,KAAK,SAAS,QAAQ,OAAO;AAChD,QAAI,WAAW,QAAW;AACtB,eAAS,KAAK,cAAc,MAAM,OAAO;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AACJ;;;ACvKO,IAAM,gBAAgB,CAAC,KAAK,SAAS;AACxC,MAAI,SAAS;AACb,MAAI,CAAC,MAAM;AAAA,EAEX,WACS,MAAM,QAAQ,IAAI,GAAG;AAC1B,QAAI,CAAC,MAAM,QAAQ,GAAG,GAAG;AAErB,YAAM,CAAC;AAAA,IACX;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,YAAM,QAAQ,KAAK;AACnB,UAAI,IAAI,OAAO,OAAO;AAClB,YAAI,KAAK;AAAA,MACb;AAAA,IACJ;AACA,UAAM,UAAU,IAAI,SAAS,KAAK;AAClC,QAAI,UAAU,GAAG;AACb,UAAI,OAAO,KAAK,QAAQ,OAAO;AAAA,IACnC;AAAA,EACJ,WACS,OAAO,SAAS,UAAU;AAC/B,aAAU,OAAO,OAAO,QAAQ,WAAY,MAAM,uBAAO,OAAO,IAAI;AACpE,UAAM,OAAO,CAAC;AAEd,WAAO,KAAK,IAAI,EAAE,QAAQ,CAAAC,SAAO;AAE7B,aAAOA,QAAO,KAAKA;AAEnB,WAAKA,QAAO;AAAA,IAChB,CAAC;AAED,WAAO,KAAK,MAAM,EAAE,QAAQ,CAAAA,SAAO;AAE/B,UAAI,CAAC,KAAKA,OAAM;AACZ,eAAO,OAAOA;AAAA,MAClB;AAAA,IACJ,CAAC;AAAA,EACL;AACA,SAAO;AACX;AACO,IAAM,eAAe,CAAC,KAAK,SAAS;AACvC,MAAI,QAAQ,MAAM;AACd,WAAO;AAAA,EACX;AACA,MAAI,OAAO,SAAS,UAAU;AAC1B,UAAM,SAAU,OAAO,OAAO,QAAQ,WAAY,MAAM,uBAAO,OAAO,IAAI;AAC1E,WAAO,KAAK,IAAI,EAAE,QAAQ,CAAAA,SAAO,OAAOA,QAAO,KAAKA,KAAI;AACxD,WAAO;AAAA,EACX;AACA,SAAO;AACX;AACO,SAAS,SAAS,OAAO;AAC5B,MAAI,CAAC,OAAO;AACR,WAAO;AAAA,EACX,WACS,MAAM,QAAQ,KAAK,GAAG;AAE3B,WAAO,MAAM,IAAI,aAAW,SAAS,OAAO,CAAC;AAAA,EACjD,WACS,OAAO,UAAU,UAAU;AAChC,UAAM,QAAQ,uBAAO,OAAO,IAAI;AAChC,WAAO,QAAQ,KAAK,EAAE,QAAQ,CAAC,CAACA,MAAK,KAAK,MAAM;AAC5C,YAAMA,QAAO,SAAS,KAAK;AAAA,IAC/B,CAAC;AACD,WAAO;AAAA,EACX,OACK;AACD,WAAO;AAAA,EACX;AACJ;AACO,IAAM,YAAY,CAAC,GAAG,MAAM;AAC/B,QAAM,OAAO,OAAO;AAEpB,MAAI,SAAS,OAAO,GAAG;AACnB,WAAO;AAAA,EACX;AAEA,MAAI,SAAS,YAAY,KAAK,GAAG;AAC7B,UAAM,SAAS,OAAO,oBAAoB,CAAC;AAC3C,UAAM,SAAS,OAAO,oBAAoB,CAAC;AAE3C,WAAQ,OAAO,UAAU,OAAO,UAAW,CAAC,OAAO,KAAK,UAAQ,CAAC,UAAU,EAAE,OAAO,EAAE,KAAK,CAAC;AAAA,EAChG;AAEA,SAAQ,MAAM;AAClB;AACO,IAAM,sBAAsB,CAAC,QAAQ;AACxC,MAAI,QAAQ,QAAW;AACnB,WAAO;AAAA,EACX;AACA,MAAI,OAAQ,OAAO,QAAQ,UAAW;AAElC,UAAM,QAAQ,OAAO,oBAAoB,GAAG;AAC5C,UAAM,QAAQ,UAAQ;AAClB,YAAM,OAAO,IAAI;AACjB,UAAI,SAAS,QAAW;AACpB,eAAO,IAAI;AAAA,MAEf,OACK;AACD,4BAAoB,IAAI;AAAA,MAC5B;AAAA,IACJ,CAAC;AAAA,EACL;AACA,SAAO;AACX;;;AChHA,IAAM,EAAE,OAAO,KAAK,OAAO,IAAI;AAExB,IAAM,MAAM,CAAC,WAAW,OAAO,IAAI,OAAO,IAAI,KAAK,IAAI,IAAI,SAAS,CAAC,CAAC;AAEtE,IAAM,QAAQ,CAAC,UAAU,MAAM,OAAO,IAAI,KAAK;AAE/C,IAAM,QAAQ,CAAC,UAAU,MAAM,MAAM,MAAM,MAAM;AAEjD,IAAM,OAAO,CAAC,gBAAgB,QAAQ,OAAO,IAAI,WAAW;;;ACLnE,IAAM,MAAM,WAAW,WAAW,MAAM,WAAW,aAAa,MAAM;AACtE,IAAM,EAAE,QAAAC,SAAQ,SAAAC,SAAQ,IAAI;AAC5B,IAAM,aAAa,CAAC;AACb,IAAM,YAAY;AAAA,EACrB,cAAc,MAAM,MAAM;AACtB,eAAW,QAAQ;AACnB,WAAO;AAAA,EACX;AAAA,EACA,cAAc,MAAM;AAChB,WAAO,WAAW;AAAA,EACtB;AAAA,EACA,mBAAmB,OAAO,UAAU;AAChC,QAAI,SAAS,CAAC,MAAM,QAAQ,KAAK,GAAG;AAEhC,MAAAD,QAAO,KAAK,EAAE,QAAQ,CAAC,SAAS;AAE5B,YAAI,QAAS,OAAO,SAAS,UAAW;AAEpC,cAAI,KAAK,WAAW;AAEhB,gBAAI,kCAAkC,IAAI;AAC1C,iBAAK,kBAAkB,MAAM,QAAQ;AAAA,UACzC,OACK;AAED,gBAAI,OAAO,UAAU,OAAO,aAAa,OAAO,WAAW;AACvD,kBAAI,oCAAoC,IAAI;AAC5C,mBAAK,mBAAmB,MAAM,QAAQ;AAAA,YAC1C;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB,MAAM,UAAU;AAC9B,QAAI,SAAU,OAAO,KAAK,WAAW,WAAY,KAAK,cAAc,KAAK,MAAM,IAAI,KAAK;AACxF,QAAI,QAAQ;AAER,eAAS,cAAc,QAAQ,KAAK,WAAW,QAAQ;AAEvD,eAAS,YAAY,QAAQ,KAAK,QAAQ,SAAS,IAAI;AAEvD,eAAS,eAAe,QAAQ,IAAI;AAEpC,WAAK,SAAS;AAAA,IAElB;AAAA,EACJ;AACJ;AACA,IAAM,gBAAgB,CAAC,QAAQ,WAAW,aAAa;AACnD,cAAY,SAAS,KAAK,cAAc;AACxC,QAAM,EAAE,QAAQ,MAAM,IAAI,SAAS;AACnC,MAAI,WAAW;AAEX,UAAM,kBAAkB,OAAO,OAAO,SAAS,MAAM,CAAC;AAEtD,UAAM,iBAAiB,OAAO,OAAO,SAAS,KAAK,CAAC;AAEpD,aAAS,OAAO,IAAI,WAAS;AAIzB,YAAM,cAAc,MAAM,eAAe,CAAC;AAE1C,YAAM,iBAAiB,OAAO,OAAO,SAAS,KAAK,CAAC;AACpD,YAAM,YAAY,UAAU,gBAAgB,iBAAiB,cAAc;AAE3E,YAAM,cAAc,UAAU;AAC9B,aAAO,EAAE,GAAG,WAAW,GAAG,MAAO;AAAA,IACrC,CAAC;AAED,WAAO,KAAK,SAAS,SAAS,CAAC;AAC/B,QAAI,0BAA0B;AAAA,EAClC;AAEA,SAAO;AACX;AACA,IAAM,cAAc,CAAC,QAAQ,QAAQ,SAAS;AAC1C,WAAS,KAAK,WAAW;AACzB,MAAI,UAAU,QAAQ;AAElB,aAAS,OAAO,OAAO,MAAM;AAAA,EACjC;AACA,SAAO;AACX;AACA,IAAM,iBAAiB,CAAC,QAAQ,SAAS;AAErC,EAAAC,SAAQ,IAAI,EAAE,QAAQ,CAAC,CAAC,MAAM,QAAQ,MAAM;AAExC,QAAI,WAAW,cAAc;AAEzB,YAAM,YAAY,QAAQ,QAAQ,SAAS,YAAY;AACvD,eAAS,wBAAwB,WAAW,MAAM,SAAS,YAAY;AAAA,IAC3E;AAAA,EACJ,CAAC;AACD,SAAO;AACX;AACA,IAAM,WAAW,CAAAC,SAAO,CAAC,GAAG,MAAM,KAAK,OAAO,EAAEA,KAAI,EAAE,YAAY,GAAG,OAAO,EAAEA,KAAI,EAAE,YAAY,CAAC;AAEjG,IAAM,OAAO,CAAC,GAAG,MAAM,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI;AAChD,IAAM,UAAU,CAAC,QAAQ,cAAc;AACnC,QAAM,YAAY,CAAC;AACnB,SAAO,QAAQ,WAAS;AACpB,UAAM,WAAW,MAAM;AACvB,QAAI,UAAU;AACV,YAAM,WAAW,UAAU,cAAc,UAAU,YAAY,CAAC;AAChE,eAAS,KAAK,KAAK;AAAA,IACvB;AAAA,EACJ,CAAC;AACD,SAAO;AACX;AACA,IAAM,0BAA0B,CAAC,WAAW,MAAM,cAAc;AAC5D,SAAOD,SAAQ,SAAS,EAAE,IAAI,CAAC,CAACC,MAAK,MAAM,OAAO;AAAA,IAC9C,KAAAA;AAAA,IACA,CAAC,OAAO,EAAE,QAAQ,UAAU;AAAA,IAC5B,QAAQ,EAAE,OAAO,cAAc;AAAA,IAC/B,GAAG,SAAS;AAAA,EAChB,EAAE;AACN;;;ACrHA,IAAM,EAAE,SAAAC,UAAS,MAAAC,MAAK,IAAI;AAC1B,IAAMC,oBAAmB,CAAC,OAAO,WAAW,WAAW,MAAM,MAAM,SAAS,OAAO,MAAM,CAAC,WAAW,WAAW,WAAW,WAAW,WAAW,SAAS,CAAC,CAAC;AAkBrJ,IAAM,OAAN,cAAmB,aAAa;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY,IAAI;AACZ,UAAM;AACN,SAAK,MAAMA,kBAAiB,EAAE;AAC9B,SAAK,KAAK;AAAA,EACd;AAAA,EACA,QAAQ,UAAU;AACd,SAAK,KAAK,QAAQ,QAAQ;AAC1B,SAAK,KAAK,YAAY,QAAQ;AAAA,EAClC;AAAA,EAEA,gBAAgB,UAAU,MAAM;AAC5B,QAAI,KAAK,UAAU;AACf,WAAK,eAAe;AAAA,IACxB;AACA,QAAI,UAAU;AACV,WAAK,WAAW;AAChB,WAAK,OAAO,QAAQ,KAAK;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAK,MAAM,aAAa;AAAA,EACnC;AAAA,EACA,SAAS;AACL,SAAK,eAAe;AACpB,SAAK,MAAM;AAAA,EACf;AAAA,EACA,iBAAiB;AACb,QAAI,KAAK,UAAU;AACf,WAAK,OAAO,EAAE,QAAQ,KAAK,CAAC;AAC5B,WAAK,WAAW;AAChB,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,MAAM,QAAQ,SAAS;AACnB,QAAI,SAAS,UAAU;AACnB,aAAO,UAAU,mBAAmB,QAAQ,OAAO,KAAK,QAAQ;AAAA,IACpE;AACA,WAAO,KAAK,KAAK,QAAQ,MAAM,OAAO;AAAA,EAC1C;AAAA,EACA,OAAO,aAAa,aAAa;AAC7B,QAAI,aAAa;AACb,WAAK,aAAa;AAClB,WAAK,KAAK,cAAc,MAAM,WAAW;AACzC,WAAK,KAAK,UAAU,WAAW;AAAA,IACnC;AACA,QAAI,KAAK,UAAU;AACf,gBAAU,mBAAmB,aAAa,KAAK,QAAQ;AACvD,WAAK,kBAAkB,EAAE,GAAG,YAAY;AACxC,WAAK,OAAO,WAAW;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,WAAW;AAGP,QAAI,KAAK,iBAAiB;AACtB,WAAK,OAAO,KAAK,eAAe;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,OAAO,OAAO;AACV,UAAM,EAAE,IAAI,WAAW,SAAS,IAAI;AACpC,UAAM,UAAU,EAAE,OAAO,SAAS;AAClC,UAAM,SAAS,EAAE,IAAI,WAAW,QAAQ;AACxC,SAAK,KAAK,UAAU,MAAM;AAC1B,SAAK,KAAK,OAAO,MAAM;AACvB,SAAK,aAAa;AAAA,EACtB;AAAA,EACA,IAAI,OAAO,QAAQ;AACf,QAAI,KAAK,YAAY,QAAQ;AACzB,YAAM,aAAa,KAAK,SAAS,SAAS;AAC1C,UAAI,KAAK,WAAW,QAAQ,YAAY,KAAK,UAAU,GAAG;AACtD,aAAK,SAAS,SAAS,SAAS,EAAE,GAAG,KAAK,MAAM,cAAc,GAAG,OAAO,CAAC;AACzE,aAAK,KAAK,gBAAgB;AAAA,MAC9B,OACK;AACD,aAAK,IAAI,2CAA2C;AAAA,MACxD;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,WAAW,QAAQ,YAAY,YAAY;AACvC,UAAM,YAAY,CAAC,CAAC,GAAG,CAAC,MAAO,aAAa,MAAM,CAAC,UAAU,WAAW,IAAI,CAAC,KACtE,CAAC,UAAU,aAAa,IAAI,CAAC;AACpC,WAAO,CAAC,cACDF,SAAQ,MAAM,EAAE,WAAW,KAAK,iBAAiB,UAAU,KAC3DA,SAAQ,MAAM,EAAE,KAAK,SAAS;AAAA,EACzC;AAAA,EACA,iBAAiB,YAAY;AACzB,WAAOC,MAAK,UAAU,EAAE,OAAO,CAAAE,SAAO,CAAC,KAAK,MAAM,eAAeA,SAAQA,SAAQ,UAAU,EAAE;AAAA,EACjG;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,IAAI,WAAW;AACX,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EACA,aAAa;AACT,SAAK,UAAU,WAAW;AAAA,EAC9B;AAAA,EACA,YAAY,UAAU;AAClB,WAAO,KAAK,UAAU,YAAY,QAAQ;AAAA,EAC9C;AACJ;;;ACpIA,IAAM,EAAE,QAAAC,SAAQ,MAAAC,MAAK,IAAI;AACzB,IAAM,EAAE,WAAW,MAAM,IAAI;AACtB,IAAM,YAAN,cAAwB,aAAa;AAAA,EACxC;AAAA,EACA,cAAc;AACV,UAAM;AAAA,EACV;AAAA,EACA,eAAe,MAAM;AACjB,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,IAAI,KAAK,MAAM;AACX,SAAK,eAAe,IAAI;AAAA,EAC5B;AAAA,EACA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,WAAW;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,WAAW;AACX,WAAO,KAAK,QAAQ,OAAO,KAAK,SAAS;AAAA,EAC7C;AAAA,EACA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,OAAO;AACP,WAAO,UAAU,KAAK,IAAI;AAAA,EAC9B;AAAA,EACA,IAAI,KAAK,MAAM;AACX,QAAI,QAAQ;AACZ,QAAI;AACA,cAAQ,MAAM,IAAI;AAAA,IACtB,SACO,GAAP;AAAA,IAEA;AACA,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,IAAI,SAAS;AACT,UAAM,SAAS,CAAC;AAChB,UAAM,OAAO,KAAK;AAClB,IAAAA,MAAK,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAAC,SAAO,OAAOA,QAAO,KAAKA,KAAI;AACxD,WAAO,UAAU,QAAQ,MAAM,IAAI;AAAA,EACvC;AACJ;AACA,IAAM,kBAAN,cAA8B,UAAU;AAAA,EACpC,OAAO,SAAS;AACZ,YAAQ,IAAI;AACZ,SAAK,SAAS;AAAA,EAClB;AAAA,EACA,WAAW;AACP,SAAK,KAAK,UAAU,IAAI;AACxB,SAAK,SAAS,IAAI;AAAA,EACtB;AAAA,EACA,SAAS,OAAO;AAAA,EAEhB;AAAA,EACA,IAAI,KAAK,MAAM;AACX,SAAK,OAAO,UAAQ,KAAK,eAAe,IAAI,CAAC;AAAA,EACjD;AAAA,EAGA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAIA,MAAK,OAAO;AACZ,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK,eAAeF,QAAO,IAAI,CAAC;AAAA,IACpC;AACA,QAAI,UAAU,QAAW;AACrB,WAAK,OAAO,UAAQ,KAAK,KAAKE,QAAO,KAAK;AAAA,IAC9C,OACK;AACD,WAAK,OAAOA,IAAG;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,OAAOA,MAAK;AACR,SAAK,OAAO,SAAO,OAAO,IAAI,KAAKA,KAAI;AAAA,EAC3C;AACJ;AACA,IAAM,mBAAN,cAA+B,gBAAgB;AAAA,EAC3C;AAAA,EACA,YAAY,MAAM;AACd,UAAM;AACN,SAAK,OAAO,EAAE,GAAG,KAAK;AAAA,EAC1B;AAAA,EACA,WAAW;AACP,WAAO,GAAG,KAAK,UAAU,KAAK,MAAM,MAAM,IAAI,MAAM,KAAK;AAAA,EAC7D;AAAA,EACA,IAAI,OAAO;AACP,WAAO,KAAK,KAAK,SAAS,KAAK,KAAK,OAAO,CAAC;AAAA,EAChD;AAAA,EACA,MAAM,MAAM;AAER,WAAO,KAAK,MAAM,SAAO,KAAK,KAAK,SAAS,GAAG,CAAC;AAAA,EACpD;AAAA,EACA,eAAe;AACX,WAAO,KAAK,KAAK,OAAO,OAAO;AAAA,EACnC;AAAA,EACA,gBAAgB;AACZ,WAAO,KAAK,GAAG,WAAW,KAAK,CAAC,KAAK,GAAG,UAAU;AAAA,EACtD;AAAA,EACA,MAAM,WAAW;AAEb,SAAK,QAAQ;AACb,WAAO,MAAM,SAAS;AAAA,EAC1B;AAAA,EAGA,MAAM,UAAU;AAAA,EAChB;AAAA,EACA,MAAM,UAAyB;AAAA,EAC/B;AAAA,EAIA,OAAO;AACH,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,KAAK,QAAQ,cAAc;AACvB,QAAI,QAAQ;AACZ,QAAI;AACA,UAAI,QAAQ;AACR,gBAAQ,MAAM,MAAM;AAAA,MACxB;AAAA,IACJ,SACO,GAAP;AAAA,IAEA;AACA,QAAI,UAAU,QAAW;AACrB,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AACJ;AACO,IAAM,QAAN,cAAoB,iBAAiB;AAC5C;;;ACxIO,IAAM,SAAS,CAAC,OAAO,QAAQ,UAAU;AAC5C,UAAQ,SAAS;AACjB,WAAS,UAAU;AACnB,UAAQ,SAAS;AACjB,QAAM,MAAM,KAAK,IAAI,IAAI,SAAS,CAAC;AACnC,QAAM,QAAQ,KAAK,IAAI,IAAI,MAAM,IAAI;AACrC,QAAM,SAAS,CAAC;AAChB,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,WAAO,KAAK,GAAG,MAAM,QAAQ,GAAG,IAAI,KAAK;AAAA,EAC7C;AACA,SAAO,OAAO,KAAK,KAAK;AAC5B;;;ACLA,IAAMC,OAAM,WAAW,WAAW,MAAM,SAAS,WAAW,SAAS;AACrE,IAAM,uBAAuB,CAAC;AAC9B,IAAM,iBAAiB,CAAC;AACxB,IAAM,EAAE,MAAAC,MAAK,IAAI;AACV,IAAM,WAAN,cAAsB,aAAa;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAIA,YAAY,KAAK;AACb,UAAM,OAAO;AACb,UAAM;AACN,SAAK,OAAO,CAAC;AACb,SAAK,WAAW,CAAC;AACjB,SAAK,SAAS,CAAC;AACf,SAAK,QAAQ,oBAAI,IAAI;AACrB,SAAK,SAAS,oBAAI,IAAI;AACtB,SAAK,OAAO,GAAG;AACf,SAAK,MAAM,WAAW,WAAW,MAAM,SAAS,YAAY,KAAK,cAAc,SAAS;AAAA,EAE5F;AAAA,EACA,OAAO,KAAK;AACR,SAAK,MAAM;AACX,SAAK,MAAM,GAAG,OAAO,OAAO,GAAG,CAAC;AAChC,SAAK,YAAY,IAAI,UAAU,GAAG,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK;AAAA,EAC/D;AAAA,EACA,MAAM,aAAa,MAAM,MAAM,SAAS,SAAS;AAE7C,UAAM,MAAM,IAAI,IAAI,MAAM,MAAM,OAAO;AAEvC,QAAI,cAAc,KAAK,eAAe,OAAO;AAE7C,UAAM,KAAK,OAAO,GAAG;AAErB,WAAO;AAAA,EACX;AAAA,EACA,eAAe,SAAS;AACpB,WAAO,OAAO,MAAM,YAAY,QAAQ,OAAO,MAAM,MAAM,OAAO;AAAA,EACtE;AAAA,EAGA,MAAM,kBAAkB,KAAK,IAAI,MAAM;AAEnC,UAAM,OAAO,IAAI,KAAK,EAAE;AAExB,UAAM,KAAK,gBAAgB,MAAM,IAAI;AAErC,UAAM,IAAI,QAAQ,IAAI;AAEtB,IAAAD,KAAI,yBAAyB,EAAE;AAE/B,WAAO;AAAA,EACX;AAAA,EAEA,WAAW,IAAI,SAAS;AACpB,SAAK,SAAS,MAAM;AAAA,EACxB;AAAA,EACA,WAAW,IAAI;AACX,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAEA,OAAO,KAAK;AACR,UAAM,EAAE,GAAG,IAAI;AACf,QAAI,MAAM,CAAC,KAAK,KAAK,KAAK;AACtB,aAAO,KAAK,KAAK,MAAM;AAAA,IAC3B;AACA,UAAM,yBAAyB;AAAA,EACnC;AAAA,EACA,UAAU,KAAK;AACX,UAAM,EAAE,GAAG,IAAI;AACf,QAAI,CAAC,MAAM,CAAC,KAAK,KAAK,KAAK;AACvB,YAAM,CAAC,KAAK,kBAAkB,OAAO;AAAA,IACzC;AACA,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,MAAM,gBAAgB,MAAM,cAAc;AACtC,UAAM,WAAW,MAAM,KAAK,eAAe,MAAM,aAAa,IAAI;AAClE,WAAO,KAAK,gBAAgB,UAAU,YAAY;AAAA,EACtD;AAAA,EAIA,MAAM,gBAAgB,KAAK,cAAc,MAAM;AAC3C,SAAK,IAAI,mBAAmB,MAAM,cAAc,IAAI,EAAE;AAEtD,WAAO,QAAQ,OAAO;AAEtB,QAAI,IAAI,MAAM,OAAO;AACjB,UAAI,IAAI;AACR,aAAQ,IAAI,MAAM,GAAG,QAAQ,MAAO;AAChC;AACJ,aAAO,GAAG,QAAQ;AAAA,IACtB;AAEA,UAAM,OAAO,IAAI,KAAK,IAAI;AAC1B,UAAM,KAAK,gBAAgB,MAAM,YAAY;AAC7C,UAAM,IAAI,QAAQ,IAAI;AACtB,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,YAAY,KAAK,MAAM,cAAc,MAAM;AAC7C,SAAK,IAAI,eAAe,IAAI,IAAI,MAAM,cAAc,IAAI,EAAE;AAC1D,UAAM,KAAK,gBAAgB,MAAM,YAAY;AAC7C,UAAM,IAAI,QAAQ,IAAI;AACtB,WAAO;AAAA,EAeX;AAAA,EACA,WAAW,MAAM,MAAM;AAEnB,QAAI,KAAK,QAAQ,OAAO;AAExB,QAAI,KAAK,KAAK;AACV,UAAI,IAAI;AACR,aAAQ,KAAK,GAAG,MAAM,MAAO;AACzB;AACJ,WAAK,GAAG,MAAM;AAAA,IAClB;AAEA,WAAO;AAAA,EACX;AAAA,EAGA,SAAS,SAAS,OAAO;AAGrB,QAAI,MAAM,SAAS;AACf,YAAM,QAAQ,IAAI;AAAA,IACtB;AAEA,UAAM,UAAU,YAAY,KAAK,aAAa,SAAS,KAAK;AAC5D,UAAM,UAAU,YAAY,KAAK,aAAa,SAAS,KAAK;AAO5D,UAAM,OAAO,GAAG,KAAK,OAAO;AAC5B,UAAM,WAAW,KAAK,aAAa,KAAK,MAAM,OAAO;AACrD,UAAM,OAAO,UAAU,UAAU,IAAI;AAErC,SAAK,OAAO,WAAW;AAEvB,SAAK,gBAAgB,OAAO;AAAA,EAIhC;AAAA,EACA,MAAM,aAAa,SAAS,OAAO;AAC/B,QAAI,MAAM,cAAc,GAAG;AACvB,WAAK,IAAI,iBAAiB,UAAU;AACpC,aAAO,KAAK,WAAW,UAAU,SAAS,MAAM,IAAI;AAAA,IACxD;AAAA,EACJ;AAAA,EACA,MAAM,aAAa,SAAS,OAAO;AAC/B,QAAI,MAAM,cAAc,GAAG;AACvB,WAAK,IAAI,iBAAiB,UAAU;AACpC,aAAO,KAAK,WAAW,UAAU,OAAO;AAAA,IAC5C;AAAA,EACJ;AAAA,EACA,aAAa,SAAS,OAAO;AACzB,SAAK,IAAI,gBAAgB,OAAO;AAChC,SAAK,SAAS,gBAAgB,OAAO;AACrC,SAAK,cAAc,SAAS,KAAK;AACjC,SAAK,KAAK,iBAAiB,EAAE,SAAS,MAAM,CAAC;AAAA,EACjD;AAAA,EAEA,cAAc,SAAS,OAAO;AAAA,EAE9B;AAAA,EACA,GAAG,SAAS,MAAM;AACd,SAAK,KAAK,OAAO,QAAQ;AAAA,EAC7B;AAAA,EACA,YAAY,SAAS;AACjB,SAAK,GAAG,SAAS,WAAS;AACtB,aAAO,SAAS,UAAU,GAAG,KAAK,OAAO,iBAAiB;AAAA,IAC9D,CAAC;AACD,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EACA,gBAAgB,SAAS;AACrB,SAAK,GAAG,SAAS,WAAS;AACtB,UAAI,OAAO,GAAG,QAAQ,GAAG;AACrB,aAAK,WAAW,OAAO;AAAA,MAC3B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,QAAQ,QAAQ;AACZ,SAAK,MAAM,IAAI,MAAM;AACrB,KAAC,GAAG,KAAK,MAAM,EAAE,QAAQ,aAAW,KAAK,wBAAwB,SAAS,MAAM,CAAC;AAAA,EACrF;AAAA,EACA,WAAW,SAAS;AAChB,SAAK,OAAO,IAAI,OAAO;AACvB,KAAC,GAAG,KAAK,KAAK,EAAE,QAAQ,YAAU,KAAK,wBAAwB,SAAS,MAAM,CAAC;AAAA,EACnF;AAAA,EACA,wBAAwB,SAAS,QAAQ;AACrC,SAAK,GAAG,SAAS,WAAS;AACtB,YAAM,MAAM,KAAK,IAAI,QAAQ,OAAO,GAAG;AACvC,UAAI,CAAC,MAAM,GAAG,SAAS,KAAM,OAAO,WAAW,GAAG,GAAI;AAClD,aAAK,mBAAmB,SAAS,MAAM;AAAA,MAC3C;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,mBAAmB,SAAS,QAAQ;AAChC,SAAK,SAAS,WAAW,SAAS,MAAM;AAAA,EAC5C;AAAA,EACA,MAAM,eAAe,MAAM,MAAM;AAC7B,QAAI;AACA,YAAM,UAAU,MAAM,KAAK,uBAAuB,IAAI;AACtD,aAAO,UAAU,IAAI;AAAA,IACzB,SACO,GAAP;AACI,MAAAA,KAAI,MAAM,kBAAkB,UAAU,CAAC;AAAA,IAC3C;AAAA,EACJ;AAAA,EACA,MAAM,uBAAuB,MAAM;AAC/B,WAAO,qBAAqB,SAAS,KAAK,iBAAiB,IAAI;AAAA,EACnE;AAAA,EACA,iBAAiB,MAAM,MAAM;AACzB,UAAM,EAAE,iBAAiB,kBAAkB,uBAAuB,IAAI;AACtE,QAAI,CAAC,kBAAkB;AACnB,YAAM,kCAAkC;AAAA,IAC5C,OACK;AACD,YAAM,iBAAiB,iBAAiB,MAAM,EAAE,GAAG,iBAAiB,KAAK,CAAC;AAC1E,6BAAuB,MAAM,cAAc;AAC3C,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,OAAO,uBAAuB,MAAM,gBAAgB;AAChD,WAAO,qBAAqB,QAAQ;AAAA,EACxC;AAAA,EACA,aAAa,MAAM;AACf,QAAI,QAAQ,KAAK,OAAO,KAAK;AAC7B,QAAI,CAAC,OAAO;AACR,cAAQ,KAAK,YAAY,IAAI;AAC7B,WAAK,SAAS,KAAK,MAAM,KAAK;AAAA,IAClC;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY,MAAM;AACd,UAAME,OAAMD,MAAK,cAAc,EAAE,KAAK,SAAO,KAAK,MAAM,WAAW,GAAG,CAAC;AACvE,UAAM,aAAa,eAAe,OAAOC,IAAG,MAAM;AAClD,WAAO,IAAI,WAAW,IAAI;AAAA,EAC9B;AAAA,EACA,OAAO,mBAAmB,KAAK,YAAY;AACvC,mBAAe,OAAO;AAAA,EAC1B;AACJ;AA5QO,IAAM,UAAN;AAaH,cAbS,SAaF;AACP,cAdS,SAcF;AACP,cAfS,SAeF;;;ACxBX,IAAMC,OAAM,WAAW,WAAW,MAAM,QAAQ,gBAAgB,QAAQ;AACxE,IAAM,EAAE,SAAAC,UAAS,QAAAC,QAAO,IAAI;AACrB,IAAM,SAAN,MAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY,QAAQ;AAChB,SAAK,SAAS,CAAC;AACf,SAAK,YAAY,CAAC;AAClB,SAAK,QAAQ,CAAC;AACd,SAAK,OAAOA,QAAO,IAAI;AACvB,QAAI,QAAQ;AACR,WAAK,MAAM,MAAM;AAAA,IACrB;AAAA,EACJ;AAAA,EACA,MAAM,QAAQ;AAEV,UAAM,aAAa,KAAK,UAAU,MAAM;AACxC,SAAK,cAAc,YAAY,QAAQ,EAAE;AACzC,WAAO;AAAA,EACX;AAAA,EACA,UAAU,QAAQ;AACd,QAAI,OAAO,WAAW,UAAU;AAC5B,YAAM,MAAM,0BAA0B;AAAA,IAC1C;AAEA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,MAAM,UAAU,YAAY;AAEtC,eAAWC,QAAO,MAAM;AACpB,cAAQA;AAAA,aACC;AAED,eAAK,OAAO,EAAE,GAAG,KAAK,MAAM,GAAG,KAAK,MAAM;AAC1C;AAAA,aACC;AAED,eAAK,gBAAgB,KAAK,OAAO;AACjC;AAAA,iBACK;AAEL,gBAAM,YAAY,aAAa,GAAG,cAAc,aAAa;AAC7D,eAAK,kBAAkB,WAAWA,MAAK,KAAKA,KAAI;AAChD;AAAA,QACJ;AAAA;AAAA,IAER;AAAA,EACJ;AAAA,EACA,gBAAgB,QAAQ;AACpB,eAAWA,QAAO,QAAQ;AACtB,WAAK,eAAeA,MAAK,OAAOA,KAAI;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,eAAe,MAAM,MAAM;AACvB,QAAI,KAAK,OAAO,KAAK,OAAK,EAAE,SAAS,IAAI,GAAG;AACxC,MAAAH,KAAI,sBAAsB;AAC1B;AAAA,IACJ;AACA,UAAM,OAAO;AAAA,MACT;AAAA,MACA,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,IAChB;AACA,SAAK,OAAO,KAAK,IAAI;AAAA,EACzB;AAAA,EACA,kBAAkB,WAAW,IAAI,MAAM;AACnC,QAAI,CAAC,KAAK,OAAO;AACb,MAAAA,KAAI,KAAK,oDAAoD,IAAI;AACjE,YAAM,MAAM;AAAA,IAChB;AACA,QAAI,KAAK,UAAU,KAAK,OAAK,EAAE,OAAO,EAAE,GAAG;AACvC,MAAAA,KAAI,2BAA2B,IAAI,IAAI;AACvC;AAAA,IACJ;AACA,SAAK,UAAU,KAAK,EAAE,IAAI,WAAW,KAAK,CAAC;AAC3C,QAAI,KAAK,QAAQ;AACb,WAAK,eAAe,KAAK,QAAQ,EAAE;AAAA,IACvC;AAAA,EACJ;AAAA,EACA,eAAe,OAAO,QAAQ;AAC1B,IAAAC,SAAQ,KAAK,EAAE,QAAQ,CAAC,CAACE,MAAK,IAAI,MAAM,KAAK,cAAc,MAAMA,MAAK,MAAM,CAAC;AAAA,EACjF;AACJ;;;ACtFO,SAAS,QAAQ,eAAe,YAAY;AAC/C,aAAW,YAAY,YAAY;AAC/B,QAAI,cAAc,cAAc,WAAW,WAAW;AAClD,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX;;;ACLA,IAAMC,OAAM,WAAW,WAAW,MAAM,QAAQ,aAAa,SAAS;AACtE,IAAM,EAAE,QAAAC,QAAO,IAAI;AACnB,IAAM,WAAW,CAAC,SAAS,EAAE,MAAM,KAAK,MAAM;AAC1C,SAAO,WAAW,SAAS,EAAE,MAAM,KAAK,CAAC,IAAI;AACjD;AACA,IAAM,aAAa,CAAC,SAAS,aAAa;AACtC,SAAOA,QAAO,QAAQ,MAAM,EAAE,OAAO,WAAS,aAAa,OAAO,QAAQ,CAAC;AAC/E;AACA,IAAM,eAAe,CAAC,OAAO,aAAa;AAEtC,QAAM,EAAE,SAAS,MAAM,IAAI;AAC3B,MAAI,YAAY,MAAM,OAAO,KAAK,IAAI,GAAG;AAErC,WAAO,QAAQ,OAAO,MAAM,KAAK;AAAA,EACrC;AACJ;AACA,IAAM,cAAc,CAAC,OAAO,UAAU;AAClC,QAAM,YAAY,CAAC,QAAQ,MAAM;AACjC,SAAQ,UAAU,SACX,UAAU,SAAS,OAAO,YAAY,CAAC,KACvC,UAAU,SAAS,OAAO,YAAY,CAAC;AAClD;AACO,IAAM,YAAN,MAAgB;AAAA,EACnB,aAAa,QAAQ,SAAS,KAAK,QAAQ;AACvC,WAAO,KAAK,aAAa,KAAK,cAAc,SAAS,KAAK,MAAM;AAAA,EACpE;AAAA,EACA,aAAa,UAAU,SAAS,KAAK,QAAQ;AACzC,WAAO,KAAK,aAAa,KAAK,gBAAgB,SAAS,KAAK,MAAM;AAAA,EACtE;AAAA,EACA,aAAa,aAAa,MAAM,SAAS,KAAK,QAAQ;AAClD,WAAO,QAAQ,IAAI,OAAO,IAAI,WAAS,KAAK,KAAK,MAAM,SAAS,KAAK,KAAK,CAAC,CAAC;AAAA,EAChF;AAAA,EACA,aAAa,aAAa,SAAS,KAAK,SAAS;AAE7C,QAAI;AAEJ,UAAM,OAAO,KAAK,cAAc,SAAS,KAAK,OAAO;AAErD,QAAI,QAAQ,SAAS,SAAS,IAAI;AAClC,QAAI,OAAO;AAEP,MAAAD,KAAI,0BAA0B,QAAQ,aAAa,MAAM,KAAK,OAAO;AAAA,IACzE,OACK;AACD,MAAAA,KAAI,2BAA2B,KAAK,OAAO;AAE3C,cAAQ,UAAU,YAAY,SAAS,IAAI;AAE3C,cAAQ,MAAM;AAEd,UAAI,MAAM,cAAc,GAAG;AACvB,cAAM,SAAS,MAAM,MAAM,QAAQ;AACnC,gBAAS,UAAU,OAAQ,QAAQ;AAAA,MACvC;AAAA,IACJ;AAEA,QAAI,SAAS,KAAK,MAAM,KAAK;AAE7B,QAAI,UAAU,QAAW;AACrB,MAAAA,KAAI,oBAAoB,KAAK;AAC7B,YAAM,OAAO;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,OAAO,YAAY,SAAS,MAAM;AAE9B,UAAM,QAAQ,QAAQ,YAAY,IAAI;AACtC,YAAQ,SAAS,KAAK,MAAM,KAAK;AACjC,WAAO;AAAA,EACX;AAAA,EACA,aAAa,eAAe,SAAS,KAAK,MAAM;AAC5C,IAAAA,KAAI,gCAAgC,KAAK,OAAO;AAChD,YAAQ,YAAY,KAAK,IAAI;AAC7B,QAAI,YAAY,KAAK,IAAI;AAAA,EAC7B;AAAA,EACA,aAAa,aAAa,SAAS,KAAK,YAAY;AAChD,eAAW,QAAQ,UAAQ;AACvB,cAAQ,YAAY,IAAI;AACxB,UAAI,YAAY,IAAI;AAAA,IACxB,CAAC;AAAA,EACL;AAAA,EACA,OAAO,cAAc,SAAS,KAAK,SAAS;AACxC,UAAM,OAAO;AAAA,MACT,GAAG;AAAA,MACH,OAAO,IAAI;AAAA,MACX,KAAK,QAAQ;AAAA,IACjB;AACA,WAAO;AAAA,MACH,GAAG;AAAA,MACH,OAAO,KAAK;AAAA,MACZ,SAAS,GAAG,KAAK,QAAQ,KAAK,SAAS,KAAK;AAAA,IAChD;AAAA,EACJ;AAAA,EACA,OAAO,WAAW,MAAM,MAAM;AAC1B,WAAO;AAAA,MACH;AAAA,MACA,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AACJ;;;ACrGA,IAAME,OAAM,WAAW,WAAW,MAAM,QAAQ,gBAAgB,SAAS;AAClE,IAAM,eAAN,MAAmB;AAAA,EACtB,aAAa,QAAQ,SAAS,KAAK,WAAW;AAE1C,eAAW,YAAY,WAAW;AAC9B,YAAM,KAAK,gBAAgB,SAAS,KAAK,QAAQ;AAAA,IACrD;AAAA,EAGJ;AAAA,EACA,aAAa,gBAAgB,SAAS,KAAK,MAAM;AAC7C,IAAAA,KAAI,qBAAqB,KAAK,EAAE;AAEhC,UAAM,OAAO,KAAK,WAAW,KAAK,IAAI;AACtC,SAAK,cAAc,KAAK;AAExB,WAAO,QAAQ,kBAAkB,KAAK,KAAK,IAAI,IAAI;AAAA,EACvD;AAAA,EACA,OAAO,WAAW,MAAM;AACpB,QAAI,KAAK,WAAW;AAChB,MAAAA,KAAI,KAAK,aAAa,KAAK,uDAAuD,KAAK,UAAU,KAAK,SAAS,IAAI;AAAA,IACvH;AAEA,UAAM,EAAE,OAAO,MAAM,YAAY,WAAW,eAAe,aAAa,IAAI;AAC5E,UAAM,SAAS,KAAK,eAAe,KAAK,OAAO;AAC/C,UAAM,UAAU,KAAK,eAAe,KAAK,QAAQ;AACjD,WAAO,EAAE,MAAM,cAAc,QAAQ,SAAS,UAAU;AAAA,EAC5D;AAAA,EACA,OAAO,eAAe,UAAU;AAC5B,WAAO,UAAU,MAAM,aAAW,OAAO,YAAY,WAAW,EAAE,CAAC,UAAU,QAAQ,IAAI,OAAO;AAAA,EACpG;AAAA,EACA,aAAa,UAAU,SAAS,KAAK,WAAW;AAC5C,WAAO,QAAQ,IAAI,UAAU,IAAI,cAAY,KAAK,kBAAkB,SAAS,KAAK,QAAQ,CAAC,CAAC;AAAA,EAChG;AAAA,EACA,aAAa,kBAAkB,SAAS,KAAK,MAAM;AAC/C,QAAI,WAAW,KAAK,EAAE;AAAA,EAC1B;AAAA,EACA,aAAa,gBAAgB,KAAK,aAAa;AAC3C,gBAAY,QAAQ,QAAM,IAAI,WAAW,EAAE,CAAC;AAAA,EAChD;AACJ;;;ACrCA,IAAMC,OAAM,WAAW,WAAW,MAAM,QAAQ,QAAQ,SAAS;AAC1D,IAAM,OAAN,MAAW;AAAA,EACd,aAAa,QAAQ,QAAQ,SAAS,KAAK;AACvC,QAAI,eAAe,SAAS;AACxB,MAAAA,KAAI,MAAM,0EAA0E;AACpF;AAAA,IACJ;AAEA,IAAAA,KAAI,+BAA+B,MAAM;AACzC,UAAM,OAAO,IAAI,OAAO,MAAM;AAE9B,UAAM,UAAU,QAAQ,SAAS,KAAK,KAAK,MAAM;AAEjD,UAAM,aAAa,QAAQ,SAAS,KAAK,KAAK,SAAS;AAGvD,QAAI,OAAO,EAAE,GAAG,IAAI,MAAM,GAAG,KAAK,KAAK;AACvC,IAAAA,KAAI,8BAA8B,OAAO,SAAS,EAAE;AAAA,EAExD;AAAA,EACA,aAAa,UAAU,QAAQ,SAAS,KAAK;AAEzC,IAAAA,KAAI,iCAAiC,OAAO,KAAK;AAEjD,UAAM,OAAO,IAAI,OAAO,MAAM;AAG9B,UAAM,UAAU,UAAU,SAAS,KAAK,KAAK,MAAM;AAEnD,UAAM,aAAa,UAAU,SAAS,KAAK,KAAK,SAAS;AAIzD,IAAAA,KAAI,gCAAgC,OAAO,KAAK;AAAA,EAEpD;AAAA,EACA,aAAa,WAAW,SAAS,SAAS,KAAK;AAC3C,eAAW,UAAU,SAAS;AAC1B,YAAM,KAAK,QAAQ,QAAQ,SAAS,GAAG;AAAA,IAC3C;AAAA,EACJ;AAAA,EACA,aAAa,aAAa,SAAS,SAAS,KAAK;AAC7C,eAAW,UAAU,SAAS;AAC1B,YAAM,KAAK,UAAU,QAAQ,SAAS,GAAG;AAAA,IAC7C;AAAA,EACJ;AACJ;;;AC9CA,IAAMC,OAAM,WAAW,WAAW,MAAM,OAAO,eAAe,SAAS;AACvE,IAAM,EAAE,QAAAC,SAAQ,QAAAC,QAAO,IAAI;AAC3B,IAAMC,WAAU,CAAC,MAAM,OAAO,QAAQ,KAAK,MAAM;AACjD,IAAMC,QAAO,CAAC,MAAM,OAAO,KAAK,KAAK,MAAM;AAC3C,IAAMC,UAAS,CAAC,MAAM,OAAO,OAAO,KAAK,MAAM;AAC/C,IAAM,UAAU;AACT,IAAM,cAAN,MAAkB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY,WAAW,SAAS,KAAK;AACjC,SAAK,UAAU;AACf,SAAK,MAAM;AACX,SAAK,YAAY,CAAC;AAClB,SAAK,YAAY,CAAC;AAClB,IAAAD,MAAK,SAAS,EAAE,QAAQ,OAAK,KAAK,UAAU,KAAK,KAAK,gBAAgB,UAAU,EAAE,CAAC;AAAA,EACvF;AAAA,EACA,gBAAgB,UAAU,YAAY,cAAc;AAChD,qBAAiB,CAAC;AAClB,IAAAA,MAAK,QAAQ,EAAE,QAAQ,CAAAE,SAAO;AAC1B,UAAIA,KAAI,WAAW,GAAG,GAAG;AACrB,qBAAaA,QAAO,EAAE,GAAG,SAASA,OAAM,GAAI,aAAaA,SAAQ,CAAC,EAAG;AAAA,MACzE,OACK;AACD,QAAAL,QAAO,cAAc,KAAK,oBAAoBK,MAAK,SAASA,OAAM,YAAY,YAAY,CAAC;AAAA,MAC/F;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB,YAAY,cAAc,YAAY,cAAc;AACpE,UAAM,YAAY;AAAA,MACd,CAAC,aAAa;AAAA,QACV,GAAG;AAAA,QACH,QAAQ,CAAC;AAAA,QACT,GAAI,cAAc,EAAE,WAAW;AAAA,MACnC;AAAA,IACJ;AACA,IAAAH,SAAQ,aAAa,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,QAAQ,UAAU,MAAM;AACjE,MAAAF,QAAO,WAAW,KAAK,gBAAgB,YAAY,GAAG,cAAc,UAAU,YAAY,CAAC;AAC3F,gBAAU,YAAY,OAAO,UAAU,CAAC;AAAA,IAC5C,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,MAAM,QAAQ,OAAO,EAAE,IAAI,UAAU,iBAAiB,GAAG;AACrD,UAAM,SAAS,MAAM,SAAS,YAAY;AAC1C,UAAM,SAAS,CAAC;AAChB,UAAM,YAAY,CAAC;AACnB,IAAAI,QAAO,MAAM,KAAK,EAAE,QAAQ,UAAQ;AAChC,YAAM,WAAW,KAAK,UAAU,KAAK;AACrC,UAAI,CAAC,UAAU;AACX,cAAO,cAAc,KAAK;AAAA,MAC9B;AACA,YAAM,WAAW,CAAC;AAClB,WAAK,cAAc,MAAM,UAAU,QAAQ,QAAQ;AACnD,WAAK,iBAAiB,MAAM,QAAQ,kBAAkB,UAAU,SAAS;AAAA,IAC7E,CAAC;AACD,SAAK,gBAAgB,MAAM;AAC3B,IAAAL,KAAI,aAAa,EAAE,OAAO,QAAQ,UAAU,CAAC;AAE7C,UAAM,UAAU,QAAQ,KAAK,SAAS,KAAK,KAAK,MAAM;AACtD,UAAM,KAAK,iBAAiB,SAAS;AACrC,WAAO,UAAU,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;AAAA,EACvC;AAAA,EACA,cAAc,EAAE,IAAI,aAAa,MAAM,GAAG,UAAU,QAAQ,UAAU;AAClE,IAAAG,SAAQ,SAAS,OAAO,EAAE,QAAQ,CAAC,CAAC,MAAM,KAAK,MAAM;AACjD,eAAS,QAAQ,CAAC;AAClB,YAAM,UAAU,KAAK,YAAY,IAAI,IAAI;AACzC,YAAM,aAAa,QAAQ,SAAS,MAAM;AAC1C,YAAM,aAAa,cAAc;AACjC,WAAK,aAAa,SAAS,OAAO,YAAY,YAAY,QAAQ,SAAS,KAAK;AAAA,IACpF,CAAC;AAAA,EACL;AAAA,EACA,aAAa,SAAS,EAAE,OAAO,MAAM,MAAM,GAAG,OAAO,aAAa,QAAQ,YAAY;AAClF,QAAI,aAAa;AACb,mBAAa,UAAU,YAAU,KAAK,SAAS,QAAQ,OAAO,UAAU,CAAC;AAAA,IAC7E,OACK;AACD,aAAO,KAAK,EAAE,MAAM,SAAS,MAAM,MAAM,CAAC;AAC1C,WAAK,SAAS,SAAS,OAAO,UAAU;AAAA,IAC5C;AAAA,EACJ;AAAA,EACA,SAAS,SAAS,MAAM,YAAY;AAChC,eAAW,KAAK,EAAE,IAAI,QAAQ,CAAC;AAC/B,SAAK,UAAU,WAAW,CAAC,GAAI,KAAK,UAAU,YAAY,CAAC,GAAI,GAAI,QAAQ,CAAC,CAAE;AAAA,EAClF;AAAA,EACA,gBAAgB,QAAQ;AACpB,WAAO,QAAQ,WAAS,MAAM,OAAO,KAAK,UAAU,MAAM,KAAK;AAAA,EACnE;AAAA,EACA,eAAe,UAAU,UAAU;AAC/B,WAAO,UAAU,IAAI,WAAS;AAC1B,YAAM,EAAE,KAAAG,MAAK,QAAQ,IAAI,KAAK,cAAc,KAAK;AACjD,YAAM,OAAO,CAAC,OAAO,WAAW,EAAE,CAAC,GAAGA,OAAM,UAAU,IAAI,KAAK,UAAU,MAAM;AAC/E,aAAO,SAAS,WAAWA,OAAM,IAAI,CAAC,EAAE,GAAG,GAAG,MAAM,KAAK,IAAI,CAAC,CAAC;AAAA,IACnE,CAAC,EAAE,KAAK,EAAE,OAAO,OAAK,CAAC;AAAA,EAC3B;AAAA,EACA,cAAc,OAAO;AACjB,QAAI,OAAO,UAAU,UAAU;AAC3B,aAAO,EAAE,KAAK,OAAO,SAAS,GAAG;AAAA,IACrC,OACK;AACD,YAAM,CAACA,MAAK,OAAO,IAAIH,SAAQ,KAAK,EAAE;AACtC,aAAO,EAAE,KAAAG,MAAK,QAAQ;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,iBAAiB,MAAM,QAAQ,kBAAkB,UAAU,WAAW;AAClE,UAAM,WAAW,KAAK,UAAU,KAAK;AACrC,UAAM,cAAc,KAAK,YAAY,KAAK,IAAI,WAAW;AACzD,UAAM,YAAY,SAAS,gBAAgB;AAC3C,SAAK,qBAAqB,QAAQ,EAAE,QAAQ,UAAQ;AAChD,gBAAU,KAAK,KAAK,gBAAgB,MAAM,MAAM,WAAW,UAAU,QAAQ,CAAC;AAAA,IAClF,CAAC;AAAA,EACL;AAAA,EACA,gBAAgB,EAAE,IAAI,MAAM,GAAG,cAAc,WAAW,UAAU,UAAU;AACxE,UAAM,aAAa,KAAK,YAAY,IAAI,YAAY;AACpD,UAAM,OAAO,SAAS;AACtB,UAAM,gBAAgB,OAAO,OAAO,CAAC,GAAG,SAAS,CAAC,GAAG,KAAK,iBAAiB,CAAC,CAAC;AAC7E,WAAO;AAAA,MACH,IAAI;AAAA,MACJ,MAAM;AAAA,QACF,OAAO,KAAK;AAAA,QACZ;AAAA,QACA,SAAS,KAAK,eAAe,KAAK,SAAS,QAAQ;AAAA,QACnD,UAAU,KAAK,eAAe,KAAK,UAAU,QAAQ;AAAA,QACrD,QAAQ,CAAC;AAAA,QACT,YAAY,KAAK,iBAAiB,IAAI,KAAK,YAAY,SAAS;AAAA,MACpE;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,YAAY,IAAI,MAAM;AAClB,WAAO,GAAG,KAAK,GAAG,KAAK,YAAY,KAAK;AAAA,EAC5C;AAAA,EACA,iBAAiB,IAAI,eAAe,kBAAkB;AAClD,WAAO,gBAAgB,KAAK,YAAY,IAAI,aAAa,IAAI;AAAA,EACjE;AAAA,EACA,MAAM,iBAAiB,WAAW;AAC9B,UAAM,mBAAmB,UAAU,OAAO,CAAC,EAAE,GAAG,MAAM,KAAK,IAAI,MAAM,GAAG;AACxE,qBAAiB,QAAQ,cAAY,KAAK,oBAAoB,QAAQ,CAAC;AACvE,UAAM,eAAe,UAAU,OAAO,CAAC,EAAE,GAAG,MAAM,CAAC,KAAK,IAAI,MAAM,GAAG;AACrE,UAAM,aAAa,QAAQ,KAAK,SAAS,KAAK,KAAK,YAAY;AAC/D,UAAM,mBAAmB,KAAK,qBAAqB,SAAS;AAC5D,UAAM,aAAa,UAAU,KAAK,SAAS,KAAK,KAAK,gBAAgB;AAAA,EACzE;AAAA,EACA,qBAAqB,WAAW;AAC5B,UAAM,0BAA0BF,MAAK,KAAK,IAAI,KAAK,EAAE,OAAO,QAAM;AAC9D,YAAM,YAAY,KAAK,IAAI,MAAM,IAAI,KAAK;AAC1C,UAAI,WAAW,SAAS,gBAAgB,GAAG;AACvC,eAAO;AAAA,MACX;AAIA,YAAM,oBAAoB,WAAW,MAAM,GAAG,IAAI;AAClD,aAAO,UAAU,KAAK,CAAC,EAAE,IAAAG,IAAG,MAAMA,QAAO,iBAAiB;AAAA,IAC9D,CAAC;AACD,UAAM,qBAAqB,wBAAwB,OAAO,QAAM,CAAC,UAAU,KAAK,CAAC,EAAE,IAAI,QAAQ,MAAM,OAAO,OAAO,CAAC;AACpH,WAAO,mBAAmB,IAAI,SAAO,EAAE,GAAG,EAAE;AAAA,EAChD;AAAA,EACA,oBAAoB,EAAE,IAAI,KAAK,GAAG;AAC9B,UAAM,OAAO,KAAK,IAAI,MAAM;AAC5B,QAAI,KAAK,cAAc,KAAK,YAAY;AACpC,WAAK,KAAK,YAAY,KAAK;AAC3B,aAAO,OAAO,KAAK,IAAI,KAAK,EAAE,QAAQ,CAAAC,UAAQA,MAAK,SAAS,CAAC;AAAA,IACjE;AACA,UAAM,OAAO,aAAa,WAAW,IAAI;AACzC,QAAI,CAAC,UAAU,MAAM,KAAK,IAAI,GAAG;AAC7B,WAAK,OAAO;AACZ,WAAK,IAAI,WAAW,IAAI;AAAA,IAC5B;AAAA,EACJ;AAAA,EACA,MAAM,UAAU,OAAO;AACnB,IAAAR,KAAI,qBAAqB,KAAK;AAC9B,UAAM,UAAU,aAAa,KAAK,SAAS,KAAK,KAAK,KAAK,cAAc,KAAK,CAAC;AAC9E,UAAM,aAAa,gBAAgB,KAAK,KAAK,KAAK,iBAAiB,KAAK,CAAC;AAAA,EAC7E;AAAA,EACA,iBAAiB,OAAO;AACpB,UAAM,QAAQ,CAAC;AACf,IAAAK,QAAO,MAAM,KAAK,EAAE,QAAQ,CAAC,EAAE,IAAI,KAAK,MAAM;AAC1C,WAAK,qBAAqB,KAAK,UAAU,KAAK,EAAE,QAAQ,UAAQ,MAAM,KAAK,KAAK,YAAY,IAAI,IAAI,CAAC,CAAC;AAAA,IAC1G,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,UAAU;AAC3B,WAAOD,MAAK,QAAQ,EAAE,OAAO,QAAM,CAAC,GAAG,WAAW,GAAG,CAAC;AAAA,EAC1D;AAAA,EACA,cAAc,OAAO;AACjB,UAAM,QAAQ,CAAC;AACf,IAAAC,QAAO,MAAM,KAAK,EAAE,QAAQ,CAAC,EAAE,IAAI,KAAK,MAAM;AAC1C,YAAM,WAAW,KAAK,UAAU;AAChC,MAAAD,MAAK,SAAS,OAAO,EAAE,QAAQ,aAAW;AACtC,cAAM,KAAK,KAAK,YAAY,IAAI,OAAO,CAAC;AAAA,MAC5C,CAAC;AAAA,IACL,CAAC;AACD,WAAO;AAAA,EACX;AACJ;;;AC/MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACQO,IAAM,aAAa,MAAM;AAAA,EAC5B;AAAA,EACA,YAAYK,OAAM;AACd,SAAK,MAAM,CAAC;AACZ,SAAK,QAAQA,KAAI;AAAA,EACrB;AAAA,EACA,IAAI,UAAU;AACV,WAAO,OAAO,KAAK,KAAK,YAAY,CAAC,CAAC;AAAA,EAC1C;AAAA,EACA,QAAQ,MAAM;AACV,QAAI;AACJ,OAAG;AACC,aAAO,KAAK,SAAS,OAAO,IAAI;AAAA,IACpC,SAAS,SAAS;AAClB,WAAO;AAAA,EACX;AAAA,EACA,SAAS,MAAM;AACX,UAAM,OAAO,KAAK,MAAM,GAAG;AAC3B,UAAM,MAAM,KAAK,MAAM;AACvB,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,WAAO,CAAC,QAAQ,GAAG,IAAI,EAAE,KAAK,GAAG;AAAA,EACrC;AAAA,EACA,QAAQA,OAAM;AACV,QAAIA,MAAK,UAAUA,MAAKA,MAAK,SAAS,OAAO,KAAK;AAC9C,MAAAA,QAAOA,MAAK,MAAM,GAAG,EAAE;AAAA,IAC3B;AACA,SAAK,IAAI;AAAA,MACL,SAASA;AAAA,MACT,SAASA;AAAA,IACb,CAAC;AAAA,EACL;AAAA,EACA,mBAAmB,MAAM,OAAO;AAE5B,UAAM,gBAAgB,KAAK,IAAI,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE,SAAS,EAAE,EAAE,KAAK,GAAG;AAC1E,QAAI,CAAC,YAAY,UAAU;AACvB,aAAO;AAAA,IACX,OACK;AAED,UAAI,OAAO,SAAS;AAEpB,UAAI,KAAK,KAAK,SAAS,OAAO,KAAK;AAC/B,eAAO,GAAG,KAAK,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE,EAAE,KAAK,GAAG;AAAA,MACnD;AAEA,UAAI,gBAAgB,IAAI,IAAI,eAAe,IAAI,EAAE;AAEjD,UAAI,cAAc,cAAc,SAAS,OAAO,KAAK;AACjD,wBAAgB,cAAc,MAAM,GAAG,EAAE;AAAA,MAC7C;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AACA,IAAM,OAAO,YAAY,IAAI,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE,EAAE,KAAK,GAAG;AACtD,IAAM,QAAQ,WAAW,WAAW,IAAI,WAAW,IAAI;AAC9D,MAAM,IAAI,WAAW,QAAQ,KAAK;;;ADtDlC,IAAMC,OAAM,WAAW,WAAW,MAAM,MAAM,QAAQ,QAAQ,MAAM;AACpE,IAAM,0BAA0B;AAIzB,IAAM,0BAA0B,OAAO,MAAM,YAAY;AAC5D,QAAM,OAAO,SAAS,QAAQ,MAAM,kBAAkB,IAAI;AAE1D,SAAO,KAAK,MAAM,KAAK,QAAQ,IAAI,CAAC;AACxC;AACO,IAAM,oBAAoB,OAAO,SAAS;AAC7C,MAAI,MAAM;AACN,WAAO,MAAM,uBAAuB,IAAI;AAAA,EAC5C;AACA,EAAAA,KAAI,MAAM,iCAAiC;AAC/C;AACO,IAAM,yBAAyB,OAAO,SAAS;AAClD,QAAM,OAAO,YAAY,IAAI;AAC7B,MAAI;AACA,UAAM,WAAW,MAAM,MAAM,IAAI;AACjC,QAAI,SAAS,IAAI;AACb,aAAO,MAAM,SAAS,KAAK;AAAA,IAC/B,OACK;AACD,YAAM;AAAA,IACV;AAAA,EACJ,SACO,GAAP;AACI,IAAAA,KAAI,MAAM,iDAAiD,UAAU,OAAO;AAAA,EAChF;AACJ;AACO,IAAM,cAAc,CAAC,SAAS;AACjC,MAAI,MAAM;AACN,QAAI,CAAC,MAAM,SAAS,KAAK,EAAE,KAAK,CAAC,KAAK,SAAS,KAAK,GAAG;AACnD,aAAO,YAAY;AAAA,IACvB;AACA,QAAI,CAAC,MAAM,MAAM,GAAG,EAAE,IAAI,EAAE,SAAS,GAAG,GAAG;AACvC,aAAO,GAAG;AAAA,IACd;AACA,WAAO,MAAM,QAAQ,IAAI;AAAA,EAC7B;AACA,SAAO;AACX;AAEO,IAAM,0BAA0B,OAAO,eAAe;AACzD,MAAI,CAAC,wBAAwB,QAAQ;AACjC,UAAM,OAAO,MAAM,QAAQ,cAAc,uBAAuB;AAChE,IAAAA,KAAI,6BAA6B,IAAI;AACrC,UAAM,WAAW,MAAM,MAAM,IAAI;AACjC,UAAM,aAAa,MAAM,SAAS,KAAK,IAAI,qBAAqB,OAAO;AACvE,4BAAwB,SAAS,WAAW,QAAQ,YAAY,EAAE;AAAA,EACtE;AACA,SAAO,wBAAwB;AACnC;AACA,wBAAwB,SAAS;;;AEhEjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACOO,IAAM,mBAAmB,CAAC,MAAM,QAAQ;AAC3C,MAAI,YAAY,KAAK,OAAO,MAAM,QAAQ,GAAI;AAC9C,MAAI,MAAM,SAAS,GAAG;AAClB,WAAO;AAAA,EACX;AACA,MAAI,SAAS;AACb,MAAI,YAAY,IAAI;AAChB,QAAI,YAAY;AACZ,eAAS;AACb,WAAO,GAAG,mBAAmB;AAAA,EACjC;AACA,cAAY,KAAK,MAAM,YAAY,EAAE;AACrC,MAAI,YAAY,IAAI;AAChB,QAAI,YAAY;AACZ,eAAS;AACb,WAAO,GAAG,mBAAmB;AAAA,EACjC;AACA,cAAY,KAAK,MAAM,YAAY,EAAE;AACrC,MAAI,YAAY,IAAI;AAChB,QAAI,YAAY;AACZ,eAAS;AACb,WAAO,GAAG,iBAAiB;AAAA,EAC/B;AACA,cAAY,KAAK,MAAM,YAAY,EAAE;AACrC,MAAI,YAAY,IAAI;AAChB,QAAI,YAAY;AACZ,eAAS;AACb,WAAO,GAAG,gBAAgB;AAAA,EAC9B;AACA,cAAY,KAAK,MAAM,YAAY,EAAE;AACrC,MAAI,YAAY,IAAI;AAChB,QAAI,YAAY;AACZ,eAAS;AACb,WAAO,GAAG,kBAAkB;AAAA,EAChC;AACA,cAAY,KAAK,MAAM,YAAY,EAAE;AACrC,MAAI,YAAY;AACZ,aAAS;AACb,SAAO,GAAG,iBAAiB;AAC/B;;;AC/BO,IAAM,WAAW,CAACC,MAAK,QAAQ,UAAU;AAC5C,MAAIA,MAAK;AACL,iBAAaA,IAAG;AAAA,EACpB;AACA,MAAI,UAAU,OAAO;AACjB,WAAO,WAAW,QAAQ,KAAK;AAAA,EACnC;AACJ;AACO,IAAM,QAAQ,UAAQ;AACzB,SAAO,UAAU,SAAS;AACtB,UAAM,QAAQ,QAAQ;AACtB,SAAK,GAAG,IAAI;AAAA,EAChB;AACJ;AACO,IAAM,YAAY,CAAC,MAAM,YAAY;AACxC,aAAW,MAAM,WAAW,CAAC;AACjC;;;ACXA,IAAM,EAAC,YAAAC,aAAY,OAAAC,OAAK,IAAI;AAG5B,IAAMC,QAAO,YAAY,IAAI,MAAM,GAAG,EAAE,MAAM,GAAG,EAAE,EAAE,KAAK,GAAG;AAC7DC,OAAM,QAAQD,KAAI;",
  "names": ["log", "output", "key", "values", "entries", "key", "entries", "keys", "customLogFactory", "key", "create", "keys", "key", "log", "keys", "key", "log", "entries", "create", "key", "log", "values", "log", "log", "log", "assign", "create", "entries", "keys", "values", "key", "id", "host", "root", "log", "key", "logFactory", "Paths", "root", "Paths"]
}
