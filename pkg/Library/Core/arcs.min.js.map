{
  "version": 3,
  "sources": ["../../../core/js/core/EventEmitter.js", "../../../core/js/utils/types.js", "../../../core/js/utils/log.js", "../../../core/js/core/Arc.js", "../../../core/js/utils/object.js", "../../../core/js/utils/rand.js", "../../../core/js/core/Decorator.js", "../../../core/js/core/Host.js", "../../../core/js/core/Store.js", "../../../core/js/utils/id.js", "../../../core/js/Runtime.js", "../../../core/js/recipe/RecipeParser.js", "../../../core/js/utils/matching.js", "../../../core/js/recipe/StoreCook.js", "../../../core/js/recipe/ParticleCook.js", "../../../core/js/recipe/Chef.js", "../../../core/js/recipe/Graphinator.js", "../../../core/js/isolation/code.js", "../../../core/js/utils/paths.js", "../../../core/js/utils/utils.js", "../../../core/js/utils/date.js", "../../../core/js/utils/task.js", "../../../core/src/arcs.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nexport class EventEmitter {\n    // map of event name to listener array\n    listeners = {};\n    getEventListeners(eventName) {\n        return this.listeners[eventName] || (this.listeners[eventName] = []);\n    }\n    fire(eventName, ...args) {\n        const listeners = this.getEventListeners(eventName);\n        if (listeners?.forEach) {\n            listeners.forEach(listener => listener(...args));\n        }\n    }\n    listen(eventName, listener, listenerName) {\n        const listeners = this.getEventListeners(eventName);\n        listeners.push(listener);\n        listener._name = listenerName || '(unnamed listener)';\n        return listener;\n    }\n    unlisten(eventName, listener) {\n        const list = this.getEventListeners(eventName);\n        const index = (typeof listener === 'string') ? list.findIndex(l => l._name === listener) : list.indexOf(listener);\n        if (index >= 0) {\n            list.splice(index, 1);\n        }\n        else {\n            console.warn('failed to unlisten from', eventName);\n        }\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nexport const logKinds = ['log', 'group', 'groupCollapsed', 'groupEnd', 'dir'];\nexport const errKinds = ['warn', 'error'];\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logKinds, errKinds } from './types.js';\nconst { fromEntries } = Object;\nconst _logFactory = (enable, preamble, bg, color, kind = 'log') => {\n    if (typeof enable === 'string') {\n        enable = logFactory.flags[enable];\n    }\n    if (!enable) {\n        return () => { };\n    }\n    if (kind === 'dir') {\n        return console.dir.bind(console);\n    }\n    const style = `background: ${bg || 'gray'}; color: ${color || 'white'}; padding: 1px 6px 2px 7px; border-radius: 6px 0 0 6px;`;\n    return console[kind].bind(console, `%c${preamble}`, style);\n};\nexport const logFactory = (enable, preamble, bg = '', color = '') => {\n    const debugLoggers = fromEntries(logKinds.map(kind => [kind, _logFactory(enable, preamble, bg, color, kind)]));\n    const errorLoggers = fromEntries(errKinds.map(kind => [kind, _logFactory(true, preamble, bg, color, kind)]));\n    const loggers = { ...debugLoggers, ...errorLoggers };\n    // Inject `log` as default, keeping all loggers available to be invoked by name.\n    const log = loggers.log;\n    Object.assign(log, loggers);\n    return log;\n};\nlogFactory.flags = globalThis.config?.logFlags || {};\n", "/**\n * @license\n * Copyright (c) 2022 Google LLC All rights reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file.\n */\nimport { EventEmitter } from './EventEmitter.js';\nimport { logFactory } from '../utils/log.js';\nconst customLogFactory = (id) => logFactory(logFactory.flags.arc, `Arc (${id})`, 'slateblue');\nconst { assign, create } = Object;\nconst entries = (o) => Object.entries(o ?? Object);\nconst keys = (o) => Object.keys(o ?? Object);\nconst values = (o) => Object.values(o ?? Object);\nconst nob = () => create(null);\nexport class Arc extends EventEmitter {\n    log;\n    id;\n    meta;\n    stores;\n    hosts;\n    surface;\n    composer;\n    hostService;\n    constructor(id, meta, surface) {\n        super();\n        this.id = id;\n        this.meta = meta;\n        this.surface = surface;\n        this.hosts = nob();\n        this.stores = nob();\n        this.log = customLogFactory(id);\n    }\n    async addHost(host, surface) {\n        // to support hosts we need a composer\n        await this.ensureComposer();\n        // bookkeep\n        this.hosts[host.id] = host;\n        host.arc = this;\n        // TODO(sjmiles): support per host surfacing?\n        //await host.bindToSurface(surface ?? this.surface);\n        // begin work\n        this.updateHost(host);\n        return host;\n    }\n    async ensureComposer() {\n        if (!this.composer && this.surface) {\n            // create composer\n            this.composer = await this.surface.createComposer('root');\n            // pipeline for events from composer to this.onevent\n            // TODO(sjmiles): use 'bind' to avoid a closure and improve the stack trace\n            this.composer.onevent = this.onevent.bind(this);\n        }\n    }\n    rerender() {\n        values(this.hosts).forEach(h => h.rerender());\n    }\n    removeHost(id) {\n        this.hosts[id]?.detach();\n        delete this.hosts[id];\n    }\n    addStore(storeId, store) {\n        if (store && !this.stores[storeId]) {\n            this.stores[storeId] = store;\n            store.listen('change', () => this.storeChanged(storeId, store), this.id);\n        }\n    }\n    removeStore(storeId) {\n        const store = this.stores[storeId];\n        if (store) {\n            store.unlisten('change', this.id);\n        }\n        delete this.stores[storeId];\n    }\n    // TODO(sjmiles): 2nd param is used in overrides, make explicit\n    storeChanged(storeId, store) {\n        this.log(`storeChanged: \"${storeId}\"`);\n        const isBound = inputs => inputs && inputs.some(input => input && (values(input)[0] == storeId || keys(input)[0] == storeId));\n        values(this.hosts).forEach(host => {\n            const inputs = host.meta?.inputs;\n            if (inputs === '*' || isBound(inputs)) {\n                this.log(`host \"${host.id}\" has interest in \"${storeId}\"`);\n                // TODO(sjmiles): we only have to update inputs for storeId, we lose efficiency here\n                this.updateHost(host);\n            }\n        });\n        this.fire('store-changed', storeId);\n    }\n    updateParticleMeta(hostId, meta) {\n        const host = this.hosts[hostId];\n        host.meta = meta;\n        this.updateHost(host);\n    }\n    updateHost(host) {\n        host.inputs = this.computeInputs(host);\n    }\n    // TODO(sjmiles): debounce? (update is sync-debounced already)\n    // complement to `assignOutputs`\n    computeInputs(host) {\n        const inputs = nob();\n        //\n        const bindings = host.meta?.inputs;\n        if (bindings === '*') {\n            // TODO(sjmiles): we could make the contract that the bindAll inputs are\n            // names (or names + meta) only. The Particle could look up values via\n            // service (to reduce throughput requirements)\n            entries(this.stores).forEach(([name, store]) => inputs[name] = store.pojo);\n        }\n        //\n        else {\n            // start with staticInputs\n            assign(inputs, host.meta?.staticInputs);\n            // for all bindings, copy in non-undefined values\n            bindings?.filter(b => b).forEach(b => {\n                // extract key and value for the binding\n                const [prop, binding] = entries(b).pop() || [];\n                if (prop && binding) {\n                    // look for store data at this binding\n                    const value = this.stores[binding]?.pojo;\n                    // if it's defined, capture it as input\n                    if (value !== undefined) {\n                        inputs[prop] = value;\n                    }\n                }\n            });\n            this.log(`computeInputs(${host.id}) =`, inputs);\n        }\n        return inputs;\n    }\n    // complement to `computeInputs`\n    assignOutputs({ id, meta }, outputs) {\n        const names = keys(outputs);\n        if (meta?.outputs && names.length) {\n            names.forEach(name => this.assignOutput(name, outputs[name], meta.outputs));\n            this.log(`[end][${id}] assignOutputs:`, outputs);\n        }\n    }\n    assignOutput(name, output, outputs) {\n        if (output !== undefined) {\n            const binding = this.findOutputByName(outputs, name) || name;\n            const store = this.stores[binding];\n            if (!store) {\n                if (outputs?.[name]) {\n                    this.log.warn(`assignOutputs: no \"${binding}\" store for output \"${name}\"`);\n                }\n            }\n            else {\n                // Note: users can mess up output data in any way they see fit, so we should\n                // probably invent `outputCleansing`.\n                this.log(`assignOutputs: \"${name}\" is dirty, updating Store \"${binding}\"`, output);\n                store.data = output;\n            }\n        }\n    }\n    findOutputByName(outputs, name) {\n        const output = outputs?.find(output => keys(output || 0)[0] === name);\n        if (output) {\n            return values(output)[0];\n        }\n    }\n    async render(packet) {\n        if (this.composer) {\n            this.composer.render({ ...packet, arcid: this.id });\n        }\n        else {\n            //this.log.low('render called, but composer is null', packet);\n        }\n    }\n    onevent(pid, eventlet) {\n        const host = this.hosts[pid];\n        if (host) {\n            host.handleEvent(eventlet);\n        }\n    }\n    async service(host, request) {\n        let result = await this.surface?.service(request);\n        if (result === undefined) {\n            result = this.hostService?.(host, request);\n        }\n        return result;\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\n/*\n * update the fields of `obj` with the fields of `data`,\n * perturbing `obj` as little as possible (since it might be a magic proxy thing\n * like an Automerge document)\n */\nexport const shallowUpdate = (obj, data) => {\n    let result = data;\n    if (!data) {\n        //\n    }\n    else if (Array.isArray(data)) {\n        if (!Array.isArray(obj)) {\n            // TODO(sjmiles): eek, very perturbing to obj\n            obj = [];\n        }\n        for (let i = 0; i < data.length; i++) {\n            const value = data[i];\n            if (obj[i] !== value) {\n                obj[i] = value;\n            }\n        }\n        const overage = obj.length - data.length;\n        if (overage > 0) {\n            obj.splice(data.length, overage);\n        }\n    }\n    else if (typeof data === 'object') {\n        result = (obj && typeof obj === 'object') ? obj : Object.create(null);\n        const seen = {};\n        // for each key in input data ...\n        Object.keys(data).forEach(key => {\n            // copy that data into output\n            result[key] = data[key];\n            // remember the key\n            seen[key] = true;\n        });\n        // for each key in the output data...\n        Object.keys(result).forEach(key => {\n            // if this key was not in the input, remove it\n            if (!seen[key]) {\n                delete result[key];\n            }\n        });\n    }\n    return result;\n};\nexport const shallowMerge = (obj, data) => {\n    if (data == null) {\n        return null;\n    }\n    if (typeof data === 'object') {\n        const result = (obj && typeof obj === 'object') ? obj : Object.create(null);\n        Object.keys(data).forEach(key => result[key] = data[key]);\n        return result;\n    }\n    return data;\n};\nexport function deepCopy(datum) {\n    if (!datum) {\n        return datum;\n    }\n    else if (Array.isArray(datum)) {\n        // This is trivially type safe but tsc needs help\n        return datum.map(element => deepCopy(element));\n    }\n    else if (typeof datum === 'object') {\n        const clone = Object.create(null);\n        Object.entries(datum).forEach(([key, value]) => {\n            clone[key] = deepCopy(value);\n        });\n        return clone;\n    }\n    else {\n        return datum;\n    }\n}\nexport const deepEqual = (a, b) => {\n    const type = typeof a;\n    // must be same type to be equal\n    if (type !== typeof b) {\n        return false;\n    }\n    // we are `deep` because we recursively study object types\n    if (type === 'object' && a && b) {\n        const aProps = Object.getOwnPropertyNames(a);\n        const bProps = Object.getOwnPropertyNames(b);\n        // equal if same # of props, and no prop is not deepEqual\n        return (aProps.length == bProps.length) && !aProps.some(name => !deepEqual(a[name], b[name]));\n    }\n    // finally, perform simple comparison\n    return (a === b);\n};\nexport const deepUndefinedToNull = (obj) => {\n    if (obj === undefined) {\n        return null;\n    }\n    if (obj && (typeof obj === 'object')) {\n        // we are `deep` because we recursively study object types\n        const props = Object.getOwnPropertyNames(obj);\n        props.forEach(name => {\n            const prop = obj[name];\n            if (prop === undefined) {\n                delete obj[name];\n                //obj[name] = null;\n            }\n            else {\n                deepUndefinedToNull(prop);\n            }\n        });\n    }\n    return obj;\n};\n", "/**\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nconst { floor, pow, random } = Math;\n// random n-digit number\nexport const key = (digits) => floor((1 + random() * 9) * pow(10, digits - 1));\n// random integer from [0..range)\nexport const irand = (range) => floor(random() * range);\n// random element from array\nexport const arand = (array) => array[irand(array.length)];\n// test if event has occured, where `probability` is between [0..1]\nexport const prob = (probability) => Boolean(random() < probability);\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nimport { deepCopy } from '../utils/object.js';\nconst log = logFactory(logFactory.flags.decorator, 'Decorator', 'plum');\nconst { values, entries } = Object;\nconst opaqueData = {};\nexport const Decorator = {\n    setOpaqueData(name, data) {\n        opaqueData[name] = data; //deepCopy(data);\n        return name;\n    },\n    getOpaqueData(name) {\n        return opaqueData[name];\n    },\n    maybeDecorateModel(model, particle) {\n        if (model && !Array.isArray(model)) {\n            // for each item in model, regardless of key\n            values(model).forEach((item) => {\n                // is an object?\n                if (item && (typeof item === 'object')) {\n                    // are there sub-models\n                    if (item['models']) {\n                        // the decorate this item\n                        log('applying decorator(s) to list:', item);\n                        this.maybeDecorateItem(item, particle);\n                    }\n                    else {\n                        // otherwise, check if there are sub-items to decorate\n                        if (model?.filter || model?.decorator || model?.collateBy) {\n                            log('scanning for lists in sub-model:', item);\n                            this.maybeDecorateModel(item, particle);\n                        }\n                    }\n                }\n            });\n        }\n        // possibly decorated model\n        return model;\n    },\n    maybeDecorateItem(item, particle) {\n        let models = (typeof item.models === 'string') ? this.getOpaqueData(item.models) : item.models;\n        if (models) {\n            // do a decorator\n            models = maybeDecorate(models, item.decorator, particle);\n            // do a filter\n            models = maybeFilter(models, item.filter, particle.impl);\n            // do a collator\n            models = maybeCollateBy(models, item);\n            // mutate items\n            item.models = models;\n            //console.log(JSON.stringify(models, null, '  '));\n        }\n    },\n};\nconst maybeDecorate = (models, decorator, particle) => {\n    decorator = particle.impl[decorator] ?? decorator;\n    const { inputs, state } = particle.internal;\n    if (decorator) {\n        // TODO(cromwellian): Could be expensive to do everything, store responsibility?\n        const immutableInputs = Object.freeze(deepCopy(inputs));\n        // we don't want the decorator to have access to mutable globals\n        const immutableState = Object.freeze(deepCopy(state));\n        // models become decorous\n        models = models.map(model => {\n            // use previously mutated data or initialize\n            // TODO(cromwellian): I'd like to do Object.freeze() here, also somehow not mutate the models inplace\n            // Possibly have setOpaqueData wrap the data so the privateData lives on the wrapper + internal immutable data\n            model.privateData = model.privateData || {};\n            // TODO(cromwellian): also could be done once during setOpaqueData() if we can track privateData differently\n            const immutableModel = Object.freeze(deepCopy(model));\n            const decorated = decorator(immutableModel, immutableInputs, immutableState);\n            // set new privateData from returned\n            model.privateData = decorated.privateData;\n            return { ...decorated, ...model, };\n        });\n        // sort (possible that all values undefined)\n        models.sort(sortByLc('sortKey'));\n        log('decoration was performed');\n    }\n    //models.forEach(model => delete model.privateData);\n    return models;\n};\nconst maybeFilter = (models, filter, impl) => {\n    filter = impl[filter] ?? filter;\n    if (filter && models) {\n        // models become filtrated\n        models = models.filter(filter);\n    }\n    return models;\n};\nconst maybeCollateBy = (models, item) => {\n    // construct requested sub-lists\n    entries(item).forEach(([name, collator]) => {\n        // generate named collations for items of the form `[name]: {collateBy}`\n        if (collator?.['collateBy']) {\n            // group the models into buckets based on the model-field named by `collateBy`\n            const collation = collate(models, collator['collateBy']);\n            models = collationToRenderModels(collation, name, collator['$template']);\n        }\n    });\n    return models;\n};\nconst sortByLc = key => (a, b) => sort(String(a[key]).toLowerCase(), String(b[key]).toLowerCase());\n//const sortBy = key => (a, b) => sort(a[key], b[key]);\nconst sort = (a, b) => a < b ? -1 : a > b ? 1 : 0;\nconst collate = (models, collateBy) => {\n    const collation = {};\n    models.forEach(model => {\n        const keyValue = model[collateBy];\n        if (keyValue) {\n            const category = collation[keyValue] || (collation[keyValue] = []);\n            category.push(model);\n        }\n    });\n    return collation;\n};\nconst collationToRenderModels = (collation, name, $template) => {\n    return entries(collation).map(([key, models]) => ({\n        key,\n        [name]: { models, $template },\n        single: !(models['length'] !== 1),\n        ...models?.[0]\n    }));\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nimport { deepEqual, deepCopy } from '../utils/object.js';\nimport { arand } from '../utils/rand.js';\nimport { EventEmitter } from './EventEmitter.js';\nimport { Decorator } from './Decorator.js';\nconst { entries, keys } = Object;\nconst customLogFactory = (id) => logFactory(logFactory.flags.host, `Host (${id})`, arand(['#5a189a', '#51168b', '#48137b', '#6b2fa4', '#7b46ae', '#3f116c']));\n/**\n * Host owns metadata (e.g. `id`, `container`) that its Particle is not allowed to access.\n * Host knows how to talk, asynchronously, to its Particle (potentially using a bus).\n**/\n/* TODO(sjmiles):\nUpdate Cycle Documented Briefly\n1. when a Store changes it invokes it's listeners\n2. when an Arc hears a Store change, it updates Hosts bound to the Store\n3. Arc updates Host by creating an `inputs` object from Stores and metadata\n   - ignores fact inputs are accumulated\n   - ignores information about which Store has updated\n4. `inputs` object is assigned to `hosts.inputs` \uD83D\uDE43\n5. Host does an expensive `deepEqual` equality check. Turning on `host` logging should reveal `this.log('inputs are not interesting, skipping update');` if data is caught in this trap\n   - we can use reference testing here if we are more careful\n     about using immutable data\n6. the particle.inputs are assigned (but is really a *merge*)\n*/\nexport class Host extends EventEmitter {\n    arc;\n    id;\n    lastOutput;\n    lastPacket;\n    lastRenderModel;\n    log;\n    meta;\n    particle;\n    constructor(id) {\n        super();\n        this.log = customLogFactory(id);\n        this.id = id;\n    }\n    onevent(eventlet) {\n        this.arc?.onevent(eventlet);\n        this.fire('eventlet', eventlet);\n    }\n    // Particle and ParticleMeta are separate, host specifically integrates these on behalf of Particle\n    installParticle(particle, meta) {\n        if (this.particle) {\n            this.detachParticle();\n        }\n        if (particle) {\n            this.particle = particle;\n            this.meta = meta || this.meta;\n        }\n    }\n    get container() {\n        return this.meta?.container || 'root';\n    }\n    detach() {\n        this.detachParticle();\n        this.arc = null;\n    }\n    detachParticle() {\n        if (this.particle) {\n            this.render({ $clear: true });\n            this.particle = null;\n            this.meta = null;\n        }\n    }\n    async service(request) {\n        if (request?.decorate) {\n            return Decorator.maybeDecorateModel(request.model, this.particle);\n        }\n        return this.arc?.service(this, request);\n    }\n    output(outputModel, renderModel) {\n        if (outputModel) {\n            this.lastOutput = outputModel;\n            this.arc?.assignOutputs(this, outputModel);\n            this.fire('output', outputModel);\n        }\n        if (this.template) {\n            Decorator.maybeDecorateModel(renderModel, this.particle);\n            this.lastRenderModel = { ...renderModel };\n            this.render(renderModel);\n        }\n    }\n    rerender() {\n        // does not re-render Frame/Slot content\n        // you probably want Arc::rerender\n        if (this.lastRenderModel) {\n            this.render(this.lastRenderModel);\n        }\n    }\n    render(model) {\n        const { id, container, template } = this;\n        const content = { model, template };\n        const packet = { id, container, content };\n        this.fire('render', packet);\n        this.arc?.render(packet);\n        this.lastPacket = packet;\n    }\n    set inputs(inputs) {\n        if (this.particle && inputs) {\n            const lastInputs = this.particle.internal.inputs;\n            if (this.dirtyCheck(inputs, lastInputs, this.lastOutput)) {\n                this.particle.inputs = deepCopy({ ...this.meta?.staticInputs, ...inputs });\n                this.fire('inputs-changed');\n            }\n            else {\n                this.log('inputs are uninteresting, skipping update');\n            }\n        }\n    }\n    dirtyCheck(inputs, lastInputs, lastOutput) {\n        const dirtyBits = ([n, v]) => (lastOutput?.[n] && !deepEqual(lastOutput[n], v))\n            || !deepEqual(lastInputs?.[n], v);\n        return !lastInputs\n            || entries(inputs).length !== this.lastInputsLength(lastInputs)\n            || entries(inputs).some(dirtyBits);\n    }\n    lastInputsLength(lastInputs) {\n        return keys(lastInputs).filter(key => !this.meta?.staticInputs?.[key] && key !== 'eventlet').length;\n    }\n    get config() {\n        return this.particle?.config;\n    }\n    get template() {\n        return this.config?.template;\n    }\n    invalidate() {\n        this.particle?.invalidate();\n    }\n    handleEvent(eventlet) {\n        return this.particle?.handleEvent(eventlet);\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { EventEmitter } from './EventEmitter.js';\nconst { create, keys } = Object;\nconst { stringify, parse } = JSON;\nexport class DataStore extends EventEmitter {\n    privateData;\n    constructor() {\n        super();\n    }\n    setPrivateData(data) {\n        this.privateData = data;\n    }\n    set data(data) {\n        this.setPrivateData(data);\n    }\n    get data() {\n        return this.privateData;\n    }\n    toString() {\n        return this.pretty;\n    }\n    get isObject() {\n        return this.data && typeof this.data === 'object';\n    }\n    get pojo() {\n        return this.data;\n    }\n    get json() {\n        return stringify(this.data);\n    }\n    set json(json) {\n        let value = null;\n        try {\n            value = parse(json);\n        }\n        catch (x) {\n            //\n        }\n        this.data = value;\n    }\n    get pretty() {\n        const sorted = {};\n        const pojo = this.pojo;\n        keys(pojo).sort().forEach(key => sorted[key] = pojo[key]);\n        return stringify(sorted, null, '  ');\n    }\n}\nclass ObservableStore extends DataStore {\n    change(mutator) {\n        mutator(this);\n        this.doChange();\n    }\n    doChange() {\n        this.fire('change', this);\n        this.onChange(this);\n    }\n    onChange(store) {\n        // override\n    }\n    set data(data) {\n        this.change(self => self.setPrivateData(data));\n    }\n    // TODO(sjmiles): one of the compile/build/bundle tools\n    // evacipates the inherited getter, so we clone it\n    get data() {\n        return this['privateData'];\n    }\n    set(key, value) {\n        if (!this.data) {\n            this.setPrivateData(create(null));\n        }\n        if (value !== undefined) {\n            this.change(self => self.data[key] = value);\n        }\n        else {\n            this.delete(key);\n        }\n    }\n    delete(key) {\n        this.change(doc => delete doc.data[key]);\n    }\n}\nclass PersistableStore extends ObservableStore {\n    meta;\n    constructor(meta) {\n        super();\n        this.meta = { ...meta };\n    }\n    toString() {\n        return `${JSON.stringify(this.meta, null, '  ')}, ${this.pretty}`;\n    }\n    get tags() {\n        return this.meta.tags ?? (this.meta.tags = []);\n    }\n    is(...tags) {\n        // true if every member of `tags` is also in `this.tags`\n        return tags.every(tag => this.tags.includes(tag));\n    }\n    isCollection() {\n        return this.meta.type?.[0] === '[';\n    }\n    shouldPersist() {\n        return this.is('persisted') && !this.is('volatile');\n    }\n    async doChange() {\n        // do not await\n        this.persist();\n        return super.doChange();\n    }\n    // TODO(sjmiles): as of now the persist/restore methods\n    // are bound in Runtime:addStore\n    async persist() {\n    }\n    async restore( /*value: any*/) {\n    }\n    // delete() {\n    //   this.persistor?.remove(this);\n    // }\n    save() {\n        return this.json;\n    }\n    load(serial, defaultValue) {\n        let value = defaultValue;\n        try {\n            if (serial) {\n                value = parse(serial);\n            }\n        }\n        catch (x) {\n            //\n        }\n        if (value !== undefined) {\n            this.data = value;\n        }\n    }\n}\nexport class Store extends PersistableStore {\n}\n", "/**\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { irand } from \"./rand.js\";\nexport const makeId = (pairs, digits, delim) => {\n    pairs = pairs || 2;\n    digits = digits || 2;\n    delim = delim || '-';\n    const min = Math.pow(10, digits - 1);\n    const range = Math.pow(10, digits) - min;\n    const result = [];\n    for (let i = 0; i < pairs; i++) {\n        result.push(`${irand(range - min) + min}`);\n    }\n    return result.join(delim);\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { Arc } from './core/Arc.js';\nimport { Host } from './core/Host.js';\nimport { Store } from './core/Store.js';\nimport { EventEmitter } from './core/EventEmitter.js';\nimport { logFactory } from './utils/log.js';\nimport { makeId } from './utils/id.js';\nconst log = logFactory(logFactory.flags.runtime, 'runtime', '#873600');\nconst particleFactoryCache = {};\nconst storeFactories = {};\nconst { keys } = Object;\nexport class Runtime extends EventEmitter {\n    log;\n    uid; // user id\n    nid; // network id\n    arcs;\n    stores;\n    peers;\n    shares;\n    endpoint;\n    network;\n    surfaces;\n    persistor;\n    prettyUid;\n    static securityLockdown;\n    static particleIndustry;\n    static particleOptions;\n    constructor(uid) {\n        uid = uid || 'user';\n        super();\n        this.arcs = {};\n        this.surfaces = {};\n        this.stores = {};\n        this.peers = new Set();\n        this.shares = new Set();\n        this.setUid(uid);\n        this.log = logFactory(logFactory.flags.runtime, `runtime:[${this.prettyUid}]`, '#873600');\n        //Runtime.securityLockdown?.(Runtime.particleOptions);\n    }\n    setUid(uid) {\n        this.uid = uid;\n        this.nid = `${uid}:${makeId(1, 2)}`;\n        this.prettyUid = uid.substring(0, uid.indexOf('@') + 1) || uid;\n    }\n    async bootstrapArc(name, meta, surface, service) {\n        // make an arc on `surface`\n        const arc = new Arc(name, meta, surface);\n        // install service handler\n        arc.hostService = this.serviceFactory(service);\n        // add `arc` to runtime\n        await this.addArc(arc);\n        // fin\n        return arc;\n    }\n    serviceFactory(service) {\n        return async (host, request) => service.handle(this, host, request);\n    }\n    // TODO(sjmiles): duplication vis a vis `installParticle`\n    // used by? ... [ParticleCook.js]\n    async bootstrapParticle(arc, id, meta) {\n        // make a host\n        const host = new Host(id);\n        // make a particle\n        await this.marshalParticle(host, meta);\n        // add `host` to `arc`\n        await arc.addHost(host);\n        // report\n        log('bootstrapped particle', id);\n        //log(host);\n        return host;\n    }\n    // no-op surface mapping\n    addSurface(id, surface) {\n        this.surfaces[id] = surface;\n    }\n    getSurface(id) {\n        return this.surfaces[id];\n    }\n    // map arcs by arc.id\n    addArc(arc) {\n        const { id } = arc;\n        if (id && !this.arcs[id]) {\n            return this.arcs[id] = arc;\n        }\n        throw `arc has no id, or id \"${id}\" is already in use`;\n    }\n    removeArc(arc) {\n        const { id } = arc;\n        if (!id || !this.arcs[id]) {\n            throw !id ? `arc has no id` : `id \"${id}\" is not in use`;\n        }\n        delete this.arcs[id];\n    }\n    // create a particle inside of host\n    async marshalParticle(host, particleMeta) {\n        const particle = await this.createParticle(host, particleMeta.kind);\n        return host.installParticle(particle, particleMeta);\n    }\n    // create a host, install a particle, add host to arc\n    // TODO(sjmiles): duplication vis a vis `bootstrapParticle`\n    // used by? ... [ArcsWorker.js]\n    async installParticle(arc, particleMeta, name) {\n        this.log('installParticle', name, particleMeta, arc.id);\n        // provide a default name\n        name = name || makeId();\n        // deduplicate name\n        if (arc.hosts[name]) {\n            let n = 1;\n            for (; (arc.hosts[`${name}-${n}`]); n++)\n                ;\n            name = `${name}-${n}`;\n        }\n        // build the structure\n        const host = new Host(name);\n        await this.marshalParticle(host, particleMeta);\n        await arc.addHost(host);\n        return host;\n    }\n    // TODO(sjmiles): third version to rule them all; bring your own host\n    async addParticle(arc, host, particleMeta, name) {\n        this.log('addParticle', arc.id, name, particleMeta, arc.id);\n        await this.marshalParticle(host, particleMeta);\n        await arc.addHost(host);\n        return host;\n        // this.log('addParticle', name, particleMeta, arc.id);\n        // // provide a default name\n        // name = name || makeId();\n        // // deduplicate name\n        // if (arc.hosts[name]) {\n        //   let n = 1;\n        //   for (; (arc.hosts[`${name}-${n}`]); n++);\n        //   name = `${name}-${n}`;\n        // }\n        // // build the structure\n        // const host = new Host(name);\n        // await this.marshalParticle(host, particleMeta);\n        // await arc.addHost(host);\n        // return host;\n    }\n    idFromName(name, list) {\n        // provide a default name\n        let id = name || makeId();\n        // deduplicate name\n        if (list[id]) {\n            let n = 1;\n            for (; (list[`${id}-${n}`]); n++)\n                ;\n            id = `${id}-${n}`;\n        }\n        // return unique id\n        return id;\n    }\n    // map a store by a Runtime-specific storeId\n    // Stores have no intrinsic id\n    addStore(storeId, store) {\n        // if the store needs to discuss things with Runtime\n        // TODO(sjmiles): this is likely unsafe for re-entry\n        if (store.marshal) {\n            store.marshal(this);\n        }\n        // bind to persist/restore functions\n        store.persist = async () => this.persistStore(storeId, store);\n        store.restore = async () => this.restoreStore(storeId, store);\n        // override the Store's own persistor to use the runtime persistor\n        // TODO(sjmiles): why?\n        // if (store.persistor) {\n        //   store.persistor.persist = store => this.persistor?.persist(storeId, store);\n        // }\n        // bind this.storeChanged to store.change (and name the binding)\n        const name = `${this.nid}:${storeId}-changed`;\n        const onChange = this.storeChanged.bind(this, storeId);\n        store.listen('change', onChange, name);\n        // map the store\n        this.stores[storeId] = store;\n        // evaluate for sharing\n        this.maybeShareStore(storeId);\n        // notify listeners that a thing happened\n        // TODO(sjmiles): makes no sense without id\n        //this.fire('store-added', store);\n    }\n    async persistStore(storeId, store) {\n        if (store.shouldPersist()) {\n            this.log(`persistStore \"${storeId}\"`);\n            return this.persistor?.persist?.(storeId, store.data);\n        }\n    }\n    async restoreStore(storeId, store) {\n        if (store.shouldPersist()) {\n            this.log(`restoreStore \"${storeId}\"`);\n            return this.persistor?.restore?.(storeId);\n        }\n    }\n    storeChanged(storeId, store) {\n        this.log('storeChanged', storeId);\n        this.network?.invalidatePeers(storeId);\n        this.onStoreChange(storeId, store);\n        this.fire('store-changed', { storeId, store });\n    }\n    // TODO(sjmiles): evacipate this method\n    onStoreChange(storeId, store) {\n        // override for bespoke response\n    }\n    do(storeId, task) {\n        task(this.stores[storeId]);\n    }\n    removeStore(storeId) {\n        this.do(storeId, store => {\n            store?.unlisten('change', `${this.nid}:${storeId}-changed`);\n        });\n        delete this.stores[storeId];\n    }\n    maybeShareStore(storeId) {\n        this.do(storeId, store => {\n            if (store?.is('shared')) {\n                this.shareStore(storeId);\n            }\n        });\n    }\n    addPeer(peerId) {\n        this.peers.add(peerId);\n        [...this.shares].forEach(storeId => this.maybeShareStoreWithPeer(storeId, peerId));\n    }\n    shareStore(storeId) {\n        this.shares.add(storeId);\n        [...this.peers].forEach(peerId => this.maybeShareStoreWithPeer(storeId, peerId));\n    }\n    maybeShareStoreWithPeer(storeId, peerId) {\n        this.do(storeId, store => {\n            const nid = this.uid.replace(/\\./g, '_');\n            if (!store.is('private') || (peerId.startsWith(nid))) {\n                this.shareStoreWithPeer(storeId, peerId);\n            }\n        });\n    }\n    shareStoreWithPeer(storeId, peerId) {\n        this.network?.shareStore(storeId, peerId);\n    }\n    async createParticle(host, kind) {\n        try {\n            const factory = await this.marshalParticleFactory(kind);\n            return factory?.(host);\n        }\n        catch (x) {\n            log.error(`createParticle(${kind}):`, x);\n        }\n    }\n    async marshalParticleFactory(kind) {\n        return particleFactoryCache[kind] ?? this.lateBindParticle(kind);\n    }\n    lateBindParticle(kind, code) {\n        const { particleOptions, particleIndustry, registerFactoryPromise } = Runtime;\n        if (!particleIndustry) {\n            throw `no ParticleIndustry to create '${kind}'`;\n        }\n        else {\n            const factoryPromise = particleIndustry(kind, { ...particleOptions, code });\n            registerFactoryPromise(kind, factoryPromise);\n            return factoryPromise;\n        }\n    }\n    static registerFactoryPromise(kind, factoryPromise) {\n        return particleFactoryCache[kind] = factoryPromise;\n    }\n    requireStore(meta) {\n        let store = this.stores[meta.name];\n        if (!store) {\n            store = this.createStore(meta);\n            this.addStore(meta.name, store);\n        }\n        return store;\n    }\n    createStore(meta) {\n        const key = keys(storeFactories).find(tag => meta.tags?.includes?.(tag));\n        const storeClass = storeFactories[String(key)] || Store;\n        return new storeClass(meta);\n    }\n    static registerStoreClass(tag, storeClass) {\n        storeFactories[tag] = storeClass;\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nconst log = logFactory(logFactory.flags.recipe, 'RecipeParser', 'violet');\nconst { entries, create } = Object;\nexport class Parser {\n    stores;\n    particles;\n    slots;\n    meta;\n    constructor(recipe) {\n        this.stores = [];\n        this.particles = [];\n        this.slots = [];\n        this.meta = create(null);\n        if (recipe) {\n            this.parse(recipe);\n        }\n    }\n    parse(recipe) {\n        // `normalize` converts shorthand to longhand before parsing\n        const normalized = this.normalize(recipe);\n        this.parseSlotSpec(normalized, 'root', '');\n        return this;\n    }\n    normalize(recipe) {\n        if (typeof recipe !== 'object') {\n            throw Error('recipe must be an Object');\n        }\n        // TODO(sjmiles): would be great if `normalize` normalized all the things\n        return recipe;\n    }\n    parseSlotSpec(spec, slotName, parentName) {\n        // process entries\n        for (const key in spec) {\n            switch (key) {\n                case '$meta':\n                    // value is a dictionary\n                    this.meta = { ...this.meta, ...spec.$meta };\n                    break;\n                case '$stores':\n                    // value is a StoreSpec\n                    this.parseStoresNode(spec.$stores);\n                    break;\n                default: {\n                    // value is a ParticleSpec\n                    const container = parentName ? `${parentName}#${slotName}` : slotName;\n                    this.parseParticleSpec(container, key, spec[key]);\n                    break;\n                }\n            }\n        }\n    }\n    parseStoresNode(stores) {\n        for (const key in stores) {\n            this.parseStoreSpec(key, stores[key]);\n        }\n    }\n    parseStoreSpec(name, spec) {\n        if (this.stores.find(s => s.name === name)) {\n            log('duplicate store name');\n            return;\n        }\n        const meta = {\n            name,\n            type: spec.$type,\n            tags: spec.$tags,\n            value: spec.$value\n        };\n        this.stores.push(meta);\n    }\n    parseParticleSpec(container, id, spec) {\n        if (!spec.$kind) {\n            log.warn(`parseParticleSpec: malformed spec has no \"kind\":`, spec);\n            throw Error();\n        }\n        if (this.particles.find(s => s.id === id)) {\n            log('duplicate particle name', id, spec);\n            return;\n        }\n        this.particles.push({ id, container, spec });\n        if (spec.$slots) {\n            this.parseSlotsNode(spec.$slots, id);\n        }\n    }\n    parseSlotsNode(slots, parent) {\n        entries(slots).forEach(([key, spec]) => this.parseSlotSpec(spec, key, parent));\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nexport function matches(candidateMeta, targetMeta) {\n    for (const property in targetMeta) {\n        if (candidateMeta[property] !== targetMeta[property]) {\n            return false;\n        }\n    }\n    return true;\n}\n;\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nimport { matches } from '../utils/matching.js';\nconst log = logFactory(logFactory.flags.recipe, 'StoreCook', '#99bb15');\nconst { values } = Object;\nconst mapStore = (runtime, { name, type }) => {\n    return findStores(runtime, { name, type })?.[0];\n};\nconst findStores = (runtime, criteria) => {\n    return values(runtime.stores).filter(store => storeMatches(store, criteria));\n};\nconst storeMatches = (store, criteria) => {\n    // TODO(b/244191110): Type matching API to be wired here.\n    const { type, ...other } = criteria;\n    if (typeMatches(type, store?.meta.type)) {\n        // generic object comparison\n        return matches(store?.meta, other);\n    }\n};\nconst typeMatches = (typeA, typeB) => {\n    const baseTypes = ['pojo', 'json'];\n    return (typeA === typeB)\n        || baseTypes.includes(typeA?.toLowerCase())\n        || baseTypes.includes(typeB?.toLowerCase());\n};\nexport class StoreCook {\n    static async execute(runtime, arc, stores) {\n        return this.forEachStore(this.realizeStore, runtime, arc, stores);\n    }\n    static async evacipate(runtime, arc, stores) {\n        return this.forEachStore(this.derealizeStore, runtime, arc, stores);\n    }\n    static async forEachStore(task, runtime, arc, stores) {\n        return Promise.all(stores.map(store => task.call(this, runtime, arc, store)));\n    }\n    static async realizeStore(runtime, arc, rawMeta) {\n        // potential initialization value\n        let value;\n        // build a StoreMeta out of parts\n        const meta = this.constructMeta(runtime, arc, rawMeta);\n        // do we already own this Store?\n        let store = mapStore(runtime, meta);\n        if (store) {\n            // use a Store\n            log(`realizeStore: mapping \"${rawMeta.name}\" to \"${store.meta.name}\"`);\n        }\n        else {\n            log(`realizeStore: creating \"${meta.name}\"`);\n            // create a Store\n            store = StoreCook.createStore(runtime, meta);\n            // default initial value comes from meta\n            value = meta?.value;\n            // persisted value may override default\n            if (store.shouldPersist()) {\n                const cached = await store.restore();\n                value = (cached == null) ? value : cached;\n            }\n        }\n        // we have a store for the Arc now\n        arc.addStore(meta.name, store);\n        // it may need a starting value\n        if (value !== undefined) {\n            log(`setting data to:`, value);\n            store.data = value;\n        }\n    }\n    static createStore(runtime, meta) {\n        // we need to create this Store\n        const store = runtime.createStore(meta);\n        runtime.addStore(meta.name, store);\n        return store;\n    }\n    static async derealizeStore(runtime, arc, meta) {\n        log(`derealizeStore: derealizing \"${meta.name}\"`);\n        runtime.removeStore(meta.name);\n        arc.removeStore(meta.name);\n    }\n    static async removeStores(runtime, arc, storeNames) {\n        storeNames.forEach(name => {\n            runtime.removeStore(name);\n            arc.removeStore(name);\n        });\n    }\n    static constructMeta(runtime, arc, rawMeta) {\n        const meta = {\n            ...rawMeta,\n            arcid: arc.id,\n            uid: runtime.uid,\n        };\n        return {\n            ...meta,\n            owner: meta.uid,\n            shareid: `${meta.name}:${meta.arcid}:${meta.uid}`\n        };\n    }\n    static specToMeta(name, spec) {\n        return {\n            name,\n            type: spec.$type,\n            tags: spec.$tags,\n            value: spec.$value\n        };\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nconst log = logFactory(logFactory.flags.recipe, 'ParticleCook', '#5fa530');\nexport class ParticleCook {\n    static async execute(runtime, arc, particles) {\n        // serial\n        for (const particle of particles) {\n            await this.realizeParticle(runtime, arc, particle);\n        }\n        // parallel\n        //return Promise.all(particles.map(particle => this.realizeParticle(runtime, arc, particle)));\n    }\n    static async realizeParticle(runtime, arc, node) {\n        log('realizedParticle:', node.id);\n        // convert spec to metadata\n        const meta = this.specToMeta(node.spec);\n        meta.container ||= node.container;\n        // make a (hosted) particle\n        return runtime.bootstrapParticle(arc, node.id, meta);\n    }\n    static specToMeta(spec) {\n        if (spec.$bindings) {\n            log.warn(`Particle '${spec.$kind}' spec contains deprecated $bindings property (${JSON.stringify(spec.$bindings)})`);\n        }\n        // TODO(sjmiles): impedance mismatch here is likely to cause problems\n        const { $kind: kind, $container: container, $staticInputs: staticInputs } = spec;\n        const inputs = this.formatBindings(spec.$inputs);\n        const outputs = this.formatBindings(spec.$outputs);\n        return { kind, staticInputs, inputs, outputs, container };\n    }\n    static formatBindings(bindings) {\n        return bindings?.map?.(binding => typeof binding === 'string' ? { [binding]: binding } : binding);\n    }\n    static async evacipate(runtime, arc, particles) {\n        return Promise.all(particles.map(particle => this.derealizeParticle(runtime, arc, particle)));\n    }\n    static async derealizeParticle(runtime, arc, node) {\n        arc.removeHost(node.id);\n    }\n    static async removeParticles(arc, particleIds) {\n        particleIds.forEach(id => arc.removeHost(id));\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nimport { Parser } from './RecipeParser.js';\nimport { StoreCook } from './StoreCook.js';\nimport { ParticleCook } from './ParticleCook.js';\nconst log = logFactory(logFactory.flags.recipe, 'Chef', '#087f23');\nexport class Chef {\n    static async execute(recipe, runtime, arc) {\n        if (arc instanceof Promise) {\n            log.error('`arc` must be an Arc, not a Promise. Make sure `boostrapArc` is awaited.');\n            return;\n        }\n        //log.groupCollapsed('executing recipe...', recipe.$meta);\n        log('|-->...| executing recipe: ', recipe);\n        const plan = new Parser(recipe);\n        // `store` preparation\n        await StoreCook.execute(runtime, arc, plan.stores);\n        // `particle` preparation\n        await ParticleCook.execute(runtime, arc, plan.particles);\n        // seasoning\n        // TODO(sjmiles): what do we use this for?\n        arc.meta = { ...arc.meta, ...plan.meta };\n        log('|...-->| recipe complete: ', recipe.$meta ?? '');\n        //log.groupEnd();\n    }\n    static async evacipate(recipe, runtime, arc) {\n        //log.groupCollapsed('evacipating recipe...', recipe.$meta);\n        log('|-->...| evacipating recipe: ', recipe.$meta);\n        // TODO(sjmiles): this is work we already did\n        const plan = new Parser(recipe);\n        // `store` work\n        // TODO(sjmiles): not sure what stores are unique to this plan\n        await StoreCook.evacipate(runtime, arc, plan.stores);\n        // `particle` work\n        await ParticleCook.evacipate(runtime, arc, plan.particles);\n        // seasoning\n        // TODO(sjmiles): doh\n        //arc.meta = {...arc.meta, ...plan.meta};\n        log('|...-->| recipe evacipated: ', recipe.$meta);\n        //log.groupEnd();\n    }\n    static async executeAll(recipes, runtime, arc) {\n        for (const recipe of recipes) {\n            await this.execute(recipe, runtime, arc);\n        }\n    }\n    static async evacipateAll(recipes, runtime, arc) {\n        for (const recipe of recipes) {\n            await this.evacipate(recipe, runtime, arc);\n        }\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { logFactory } from '../utils/log.js';\nimport { deepEqual } from '../utils/object.js';\nimport { StoreCook } from './StoreCook.js';\nimport { ParticleCook } from './ParticleCook.js';\nconst log = logFactory(logFactory.flags.graph, 'Graphinator', '#7f0823');\nconst { assign } = Object;\nconst entries = (o) => Object.entries(o ?? Object);\nconst keys = (o) => Object.keys(o ?? Object);\nconst values = (o) => Object.values(o ?? Object);\nconst idDelim = ':';\nexport class Graphinator {\n    runtime;\n    arc;\n    nodeTypes;\n    storeTags;\n    constructor(nodeTypes, runtime, arc) {\n        this.runtime = runtime;\n        this.arc = arc;\n        this.nodeTypes = {};\n        this.storeTags = {};\n        keys(nodeTypes).forEach(t => this.nodeTypes[t] = this.flattenNodeType(nodeTypes[t]));\n    }\n    flattenNodeType(nodeType, $container, flatNodeType) {\n        flatNodeType ??= {};\n        keys(nodeType).forEach(key => {\n            if (key.startsWith('$')) {\n                flatNodeType[key] = { ...nodeType[key], ...(flatNodeType[key] || {}) };\n            }\n            else {\n                assign(flatNodeType, this.flattenParticleSpec(key, nodeType[key], $container, flatNodeType));\n            }\n        });\n        return flatNodeType;\n    }\n    flattenParticleSpec(particleId, particleSpec, $container, flatNodeType) {\n        const flattened = {\n            [particleId]: {\n                ...particleSpec,\n                $slots: {},\n                ...($container && { $container })\n            }\n        };\n        entries(particleSpec.$slots || {}).forEach(([slotId, slotRecipe]) => {\n            assign(flattened, this.flattenNodeType(slotRecipe, `${particleId}#${slotId}`, flatNodeType));\n            flattened[particleId].$slots[slotId] = {};\n        });\n        return flattened;\n    }\n    async execute(graph, { id: layoutId, defaultContainer }) {\n        const layout = graph.layout?.[layoutId || 'preview'];\n        const stores = [];\n        const particles = [];\n        values(graph.nodes).forEach(node => {\n            const nodeType = this.nodeTypes[node.type];\n            if (!nodeType) {\n                throw (`node.type \"${node.type}\" not found`);\n            }\n            const connsMap = {};\n            this.prepareStores(node, nodeType, stores, connsMap);\n            this.prepareParticles(node, layout, defaultContainer, connsMap, particles);\n        });\n        this.retagStoreSpecs(stores);\n        log('Executing', { graph, stores, particles });\n        //log('Executing graph: ', stores, particles);\n        await StoreCook.execute(this.runtime, this.arc, stores);\n        await this.realizeParticles(particles);\n        return particles.map(({ id }) => id);\n    }\n    prepareStores({ id, props }, nodeType, stores, connsMap) {\n        entries(nodeType.$stores).forEach(([name, store]) => {\n            connsMap[name] = [];\n            const storeId = this.constructId(id, name);\n            const propValue = props?.[name]?.value;\n            const storeValue = propValue === undefined ? store.$value : propValue;\n            const storeConns = props?.[name]?.connection;\n            this.prepareStore(storeId, store, storeValue, storeConns, stores, connsMap[name]);\n        });\n    }\n    prepareStore(storeId, { $type: type, $tags }, value, connections, stores, storeEntry) {\n        if (connections?.length > 0) {\n            connections?.forEach?.(connId => this.addStore(connId, $tags, storeEntry));\n        }\n        else {\n            stores.push({ name: storeId, type, value });\n            this.addStore(storeId, $tags, storeEntry);\n        }\n    }\n    addStore(storeId, tags, storeEntry) {\n        storeEntry.push({ id: storeId });\n        this.storeTags[storeId] = [...(this.storeTags[storeId] || []), ...(tags || [])];\n    }\n    retagStoreSpecs(stores) {\n        stores.forEach(store => store.tags = this.storeTags[store.name]);\n    }\n    resolveIoGroup(bindings, storeMap) {\n        return bindings?.map(coded => {\n            const { key, binding } = this.decodeBinding(coded);\n            const task = (store, index) => ({ [`${key}${index === 0 ? '' : index}`]: store });\n            return storeMap[binding || key]?.map(({ id }, i) => task(id, i));\n        }).flat().filter(i => i);\n    }\n    decodeBinding(value) {\n        if (typeof value === 'string') {\n            return { key: value, binding: '' };\n        }\n        else {\n            const [key, binding] = entries(value)[0];\n            return { key, binding };\n        }\n    }\n    prepareParticles(node, layout, defaultContainer, storeMap, particles) {\n        const nodeType = this.nodeTypes[node.type];\n        const containerId = this.constructId(node.id, 'Container');\n        const container = layout?.[containerId] || defaultContainer;\n        this.getNodeParticleNames(nodeType).forEach(name => {\n            particles.push(this.prepareParticle(node, name, container, nodeType, storeMap));\n        });\n    }\n    prepareParticle({ id, props }, particleName, container, nodeType, storeMap) {\n        const particleId = this.constructId(id, particleName);\n        const spec = nodeType[particleName];\n        const $staticInputs = Object.assign({}, spec.$staticInputs || {});\n        return {\n            id: particleId,\n            spec: {\n                $kind: spec.$kind,\n                $staticInputs,\n                $inputs: this.resolveIoGroup(spec.$inputs, storeMap),\n                $outputs: this.resolveIoGroup(spec.$outputs, storeMap),\n                $slots: {},\n                $container: this.resolveContainer(id, spec.$container, container)\n            }\n        };\n    }\n    constructId(id, name) {\n        return `${id ? `${id}${idDelim}` : ''}${name}`;\n    }\n    resolveContainer(id, containerName, defaultContainer) {\n        return containerName ? this.constructId(id, containerName) : defaultContainer;\n    }\n    async realizeParticles(particles) {\n        const runningParticles = particles.filter(({ id }) => this.arc.hosts[id]);\n        runningParticles.forEach(particle => this.updateParticleHosts(particle));\n        const newParticles = particles.filter(({ id }) => !this.arc.hosts[id]);\n        await ParticleCook.execute(this.runtime, this.arc, newParticles);\n        const removedParticles = this.findRemovedParticles(particles);\n        await ParticleCook.evacipate(this.runtime, this.arc, removedParticles);\n    }\n    findRemovedParticles(particles) {\n        const runningGraphParticleIds = keys(this.arc.hosts).filter(id => {\n            const container = this.arc.hosts[id].meta.container;\n            if (container?.includes('designer#graph')) {\n                return true;\n            }\n            const containerParticle = container?.split('#')?.[0];\n            return particles.some(({ id }) => id === containerParticle);\n        });\n        const removedParticleIds = runningGraphParticleIds.filter(id => !particles.some(({ id: graphId }) => id === graphId));\n        return removedParticleIds.map(id => ({ id }));\n    }\n    updateParticleHosts({ id, spec }) {\n        const host = this.arc.hosts[id];\n        if (host.container !== spec.$container) {\n            host.meta.container = spec.$container;\n            Object.values(this.arc.hosts).forEach(host => host.rerender());\n        }\n        const meta = ParticleCook.specToMeta(spec);\n        if (!deepEqual(meta, host.meta)) {\n            host.meta = meta;\n            this.arc.updateHost(host);\n        }\n    }\n    async evacipate(graph) {\n        log('Evacipating graph', graph);\n        await StoreCook.removeStores(this.runtime, this.arc, this.getStoreNames(graph));\n        await ParticleCook.removeParticles(this.arc, this.getParticleNames(graph));\n    }\n    getParticleNames(graph) {\n        const names = [];\n        values(graph.nodes).forEach(({ id, type }) => {\n            this.getNodeParticleNames(this.nodeTypes[type]).forEach(name => names.push(this.constructId(id, name)));\n        });\n        return names;\n    }\n    getNodeParticleNames(nodeType) {\n        return keys(nodeType).filter(id => !id.startsWith('$'));\n    }\n    getStoreNames(graph) {\n        const names = [];\n        values(graph.nodes).forEach(({ id, type }) => {\n            const nodeType = this.nodeTypes[type];\n            keys(nodeType.$stores).forEach(storeId => {\n                names.push(this.constructId(id, storeId));\n            });\n        });\n        return names;\n    }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nimport { Paths } from '../utils/paths.js';\nimport { logFactory } from '../utils/log.js';\nconst log = logFactory(logFactory.flags.code, 'code', 'gold', '#333');\nconst defaultParticleBasePath = '$arcs/core/Particle.js';\n// acquire particle code\n// `kind` describes the particle\n// `options.code` may simply provide code directly\nexport const requireParticleImplCode = async (kind, options) => {\n    const code = options?.code || await fetchParticleCode(kind);\n    // TODO(sjmiles): brittle content processing, needs to be documented\n    return code.slice(code.indexOf('({'));\n};\nexport const fetchParticleCode = async (kind) => {\n    if (kind) {\n        return await maybeFetchParticleCode(kind);\n    }\n    log.error(`fetchParticleCode: empty 'kind'`);\n};\nexport const maybeFetchParticleCode = async (kind) => {\n    const path = pathForKind(kind);\n    try {\n        const response = await fetch(path);\n        if (response.ok) {\n            return await response.text();\n        }\n        else {\n            throw '';\n        }\n    }\n    catch (x) {\n        log.error(`could not locate implementation for particle \"${kind}\" [${path}]`);\n    }\n};\nexport const pathForKind = (kind) => {\n    if (kind) {\n        if (!'$./'.includes(kind[0]) && !kind.includes('://')) {\n            kind = `$library/${kind}`;\n        }\n        if (!kind?.split('/').pop().includes('.')) {\n            kind = `${kind}.js`;\n        }\n        return Paths.resolve(kind);\n    }\n    return '404';\n};\n// acquire Particle.js\nexport const requireParticleBaseCode = async (sourcePath) => {\n    if (!requireParticleBaseCode.source) {\n        const path = Paths.resolve(sourcePath || defaultParticleBasePath);\n        log('particle base code path: ', path);\n        const response = await fetch(path);\n        const moduleText = await response.text() + \"\\n//# sourceURL=\" + path + \"\\n\";\n        requireParticleBaseCode.source = moduleText.replace(/export /g, '');\n    }\n    return requireParticleBaseCode.source;\n};\nrequireParticleBaseCode.source = null;\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nexport const PathMapper = class {\n    map;\n    constructor(root) {\n        this.map = {};\n        this.setRoot(root);\n    }\n    add(mappings) {\n        Object.assign(this.map, mappings || {});\n    }\n    resolve(path) {\n        let last;\n        do {\n            path = this._resolve(last = path);\n        } while (last !== path);\n        return path;\n    }\n    _resolve(path) {\n        const bits = path.split('/');\n        const top = bits.shift();\n        const prefix = this.map[top] || top;\n        return [prefix, ...bits].join('/');\n    }\n    setRoot(root) {\n        if (root.length && root[root.length - 1] === '/') {\n            root = root.slice(0, -1);\n        }\n        this.add({\n            '$root': root,\n            '$arcs': root\n        });\n    }\n    getAbsoluteHereUrl(meta, depth) {\n        // you are here\n        const localRelative = meta.url.split('/').slice(0, -(depth ?? 1)).join('/');\n        if (!globalThis?.document) {\n            return localRelative;\n        }\n        else {\n            // document root is here\n            let base = document.URL;\n            // if document URL has a filename, remove it\n            if (base[base.length - 1] !== '/') {\n                base = `${base.split('/').slice(0, -1).join('/')}/`;\n            }\n            // create absoute path to here (aka 'local')\n            let localAbsolute = new URL(localRelative, base).href;\n            // no trailing slash!\n            if (localAbsolute[localAbsolute.length - 1] === '/') {\n                localAbsolute = localAbsolute.slice(0, -1);\n            }\n            return localAbsolute;\n        }\n    }\n};\nconst root = import.meta.url.split('/').slice(0, -3).join('/');\nexport const Paths = globalThis['Paths'] = new PathMapper(root);\nPaths.add(globalThis.config?.paths);\n", "/**\n * @license\n * Copyright (c) 2022 Google LLC All rights reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file.\n */\nexport * from './date.js';\nexport * from './id.js';\nexport * from './log.js';\nexport * from './matching.js';\nexport * from './object.js';\nexport * from './paths.js';\nexport * from './rand.js';\nexport * from './task.js';\n", "/**\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\nexport const computeAgeString = (date, now) => {\n    let deltaTime = Math.round((now - date) / 1000);\n    if (isNaN(deltaTime)) {\n        return `\u2022`;\n    }\n    let plural = '';\n    if (deltaTime < 60) {\n        if (deltaTime > 1)\n            plural = 's';\n        return `${deltaTime} second${plural} ago`;\n    }\n    deltaTime = Math.round(deltaTime / 60);\n    if (deltaTime < 60) {\n        if (deltaTime > 1)\n            plural = 's';\n        return `${deltaTime} minute${plural} ago`;\n    }\n    deltaTime = Math.round(deltaTime / 60);\n    if (deltaTime < 24) {\n        if (deltaTime > 1)\n            plural = 's';\n        return `${deltaTime} hour${plural} ago`;\n    }\n    deltaTime = Math.round(deltaTime / 24);\n    if (deltaTime < 30) {\n        if (deltaTime > 1)\n            plural = 's';\n        return `${deltaTime} day${plural} ago`;\n    }\n    deltaTime = Math.round(deltaTime / 30);\n    if (deltaTime < 12) {\n        if (deltaTime > 1)\n            plural = 's';\n        return `${deltaTime} month${plural} ago`;\n    }\n    deltaTime = Math.round(deltaTime / 12);\n    if (deltaTime > 1)\n        plural = 's';\n    return `${deltaTime} year${plural} ago`;\n};\n", "/**\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://developers.google.com/open-source/licenses/bsd\n */\n/**\n * Perform `action` if `delay` ms have elapsed since last debounce call for `key`.\n *\n * ```\n * // invoke 'task' one second after last time this line executed\n * this.debounceTask = debounce(this.debounceTask, task, 1000);\n * ```\n */\nexport const debounce = (key, action, delay) => {\n    if (key) {\n        clearTimeout(key);\n    }\n    if (action && delay) {\n        return setTimeout(action, delay);\n    }\n};\nexport const async = task => {\n    return async (...args) => {\n        await Promise.resolve();\n        task(...args);\n    };\n};\nexport const asyncTask = (task, delayMs) => {\n    setTimeout(task, delayMs ?? 0);\n};\n", "/**\n * @license\n * Copyright (c) 2022 Google LLC All rights reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file.\n */\nexport * from '../js/Runtime.js';\nexport * from '../js/core/EventEmitter.js';\nexport * from '../js/core/Store.js';\nexport * from '../js/core/Arc.js';\nexport * from '../js/core/Host.js';\nexport * from '../js/core/Decorator.js';\nexport * from '../js/recipe/Chef.js';\nexport * from '../js/recipe/Graphinator.js';\nexport * from '../js/recipe/ParticleCook.js';\nexport * from '../js/recipe/StoreCook.js';\nexport * from '../js/recipe/RecipeParser.js';\nexport * as code from '../js/isolation/code.js';\n\nimport * as utils from '../js/utils/utils.js';\nconst {logFactory, Paths} = utils;\nexport {logFactory, Paths, utils};\n\nconst root = import.meta.url.split('/').slice(0, -1).join('/');\nPaths.setRoot(root);\n"],
  "mappings": "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",
  "names": ["EventEmitter", "eventName", "args", "listeners", "listener", "listenerName", "list", "index", "l", "logKinds", "errKinds", "fromEntries", "_logFactory", "enable", "preamble", "bg", "color", "kind", "logFactory", "style", "debugLoggers", "logKinds", "errorLoggers", "errKinds", "loggers", "log", "customLogFactory", "id", "logFactory", "assign", "create", "entries", "o", "keys", "values", "nob", "Arc", "EventEmitter", "meta", "surface", "host", "h", "storeId", "store", "isBound", "inputs", "input", "hostId", "bindings", "name", "b", "prop", "binding", "value", "outputs", "names", "output", "packet", "pid", "eventlet", "request", "result", "shallowUpdate", "obj", "data", "result", "i", "value", "overage", "seen", "key", "shallowMerge", "deepCopy", "datum", "element", "clone", "deepEqual", "a", "b", "type", "aProps", "bProps", "name", "deepUndefinedToNull", "prop", "floor", "pow", "random", "key", "digits", "irand", "range", "arand", "array", "prob", "probability", "log", "logFactory", "values", "entries", "opaqueData", "Decorator", "name", "data", "model", "particle", "item", "models", "maybeDecorate", "maybeFilter", "maybeCollateBy", "decorator", "inputs", "state", "immutableInputs", "deepCopy", "immutableState", "immutableModel", "decorated", "sortByLc", "filter", "impl", "collator", "collation", "collate", "collationToRenderModels", "key", "a", "b", "sort", "collateBy", "keyValue", "$template", "entries", "keys", "customLogFactory", "id", "logFactory", "arand", "Host", "EventEmitter", "eventlet", "particle", "meta", "request", "Decorator", "outputModel", "renderModel", "model", "container", "template", "packet", "inputs", "lastInputs", "deepCopy", "lastOutput", "dirtyBits", "n", "v", "deepEqual", "key", "create", "keys", "stringify", "parse", "DataStore", "EventEmitter", "data", "json", "value", "sorted", "pojo", "key", "ObservableStore", "mutator", "store", "self", "doc", "PersistableStore", "meta", "tags", "tag", "serial", "defaultValue", "Store", "makeId", "pairs", "digits", "delim", "min", "range", "result", "i", "irand", "log", "logFactory", "particleFactoryCache", "storeFactories", "keys", "_Runtime", "EventEmitter", "uid", "makeId", "name", "meta", "surface", "service", "arc", "Arc", "host", "request", "id", "Host", "particleMeta", "particle", "n", "list", "storeId", "store", "onChange", "task", "peerId", "nid", "kind", "x", "code", "particleOptions", "particleIndustry", "registerFactoryPromise", "factoryPromise", "key", "tag", "storeClass", "Store", "Runtime", "__publicField", "log", "logFactory", "entries", "create", "Parser", "recipe", "normalized", "spec", "slotName", "parentName", "key", "container", "stores", "name", "s", "meta", "id", "slots", "parent", "matches", "candidateMeta", "targetMeta", "property", "log", "logFactory", "values", "mapStore", "runtime", "name", "type", "findStores", "criteria", "store", "storeMatches", "other", "typeMatches", "matches", "typeA", "typeB", "baseTypes", "StoreCook", "arc", "stores", "task", "rawMeta", "value", "meta", "cached", "storeNames", "spec", "log", "logFactory", "ParticleCook", "runtime", "arc", "particles", "particle", "node", "meta", "spec", "kind", "container", "staticInputs", "inputs", "outputs", "bindings", "binding", "particleIds", "id", "log", "logFactory", "Chef", "recipe", "runtime", "arc", "plan", "Parser", "StoreCook", "ParticleCook", "recipes", "log", "logFactory", "assign", "entries", "o", "keys", "values", "idDelim", "Graphinator", "nodeTypes", "runtime", "arc", "t", "nodeType", "$container", "flatNodeType", "key", "particleId", "particleSpec", "flattened", "slotId", "slotRecipe", "graph", "layoutId", "defaultContainer", "layout", "stores", "particles", "node", "connsMap", "StoreCook", "id", "props", "name", "store", "storeId", "propValue", "storeValue", "storeConns", "type", "$tags", "value", "connections", "storeEntry", "connId", "tags", "bindings", "storeMap", "coded", "binding", "task", "index", "i", "containerId", "container", "particleName", "spec", "$staticInputs", "containerName", "particle", "newParticles", "ParticleCook", "removedParticles", "containerParticle", "graphId", "host", "meta", "deepEqual", "names", "code_exports", "__export", "fetchParticleCode", "maybeFetchParticleCode", "pathForKind", "requireParticleBaseCode", "requireParticleImplCode", "PathMapper", "root", "mappings", "path", "last", "bits", "top", "meta", "depth", "localRelative", "base", "localAbsolute", "Paths", "log", "logFactory", "defaultParticleBasePath", "requireParticleImplCode", "kind", "options", "code", "fetchParticleCode", "maybeFetchParticleCode", "path", "pathForKind", "response", "Paths", "requireParticleBaseCode", "sourcePath", "moduleText", "utils_exports", "__export", "PathMapper", "Paths", "arand", "async", "asyncTask", "computeAgeString", "debounce", "deepCopy", "deepEqual", "deepUndefinedToNull", "irand", "key", "logFactory", "makeId", "matches", "prob", "shallowMerge", "shallowUpdate", "computeAgeString", "date", "now", "deltaTime", "plural", "debounce", "key", "action", "delay", "async", "task", "args", "asyncTask", "delayMs", "logFactory", "Paths", "utils_exports", "root", "Paths"]
}
